{"version":3,"sources":["jquery.maskedinput.min.js","jquery.maxlength.js"],"names":[],"mappingsfile":"vendor-libs.js","sourcesContent":["/*\n\tMasked Input plugin for jQuery\n\tCopyright (c) 2007-2013 Josh Bush (digitalbush.com)\n\tLicensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license)\n\tVersion: 1.3.1\n*/\n(function(e){function t(){var e=document.createElement(\"input\"),t=\"onpaste\";return e.setAttribute(t,\"\"),\"function\"==typeof e[t]?\"paste\":\"input\"}var n,a=t()+\".mask\",r=navigator.userAgent,i=/iphone/i.test(r),o=/android/i.test(r);e.mask={definitions:{9:\"[0-9]\",a:\"[A-Za-z]\",\"*\":\"[A-Za-z0-9]\"},dataName:\"rawMaskFn\",placeholder:\"_\"},e.fn.extend({caret:function(e,t){var n;if(0!==this.length&&!this.is(\":hidden\"))return\"number\"==typeof e?(t=\"number\"==typeof t?t:e,this.each(function(){this.setSelectionRange?this.setSelectionRange(e,t):this.createTextRange&&(n=this.createTextRange(),n.collapse(!0),n.moveEnd(\"character\",t),n.moveStart(\"character\",e),n.select())})):(this[0].setSelectionRange?(e=this[0].selectionStart,t=this[0].selectionEnd):document.selection&&document.selection.createRange&&(n=document.selection.createRange(),e=0-n.duplicate().moveStart(\"character\",-1e5),t=e+n.text.length),{begin:e,end:t})},unmask:function(){return this.trigger(\"unmask\")},mask:function(t,r){var c,l,s,u,f,h;return!t&&this.length>0?(c=e(this[0]),c.data(e.mask.dataName)()):(r=e.extend({placeholder:e.mask.placeholder,completed:null},r),l=e.mask.definitions,s=[],u=h=t.length,f=null,e.each(t.split(\"\"),function(e,t){\"?\"==t?(h--,u=e):l[t]?(s.push(RegExp(l[t])),null===f&&(f=s.length-1)):s.push(null)}),this.trigger(\"unmask\").each(function(){function c(e){for(;h>++e&&!s[e];);return e}function d(e){for(;--e>=0&&!s[e];);return e}function m(e,t){var n,a;if(!(0>e)){for(n=e,a=c(t);h>n;n++)if(s[n]){if(!(h>a&&s[n].test(R[a])))break;R[n]=R[a],R[a]=r.placeholder,a=c(a)}b(),x.caret(Math.max(f,e))}}function p(e){var t,n,a,i;for(t=e,n=r.placeholder;h>t;t++)if(s[t]){if(a=c(t),i=R[t],R[t]=n,!(h>a&&s[a].test(i)))break;n=i}}function g(e){var t,n,a,r=e.which;8===r||46===r||i&&127===r?(t=x.caret(),n=t.begin,a=t.end,0===a-n&&(n=46!==r?d(n):a=c(n-1),a=46===r?c(a):a),k(n,a),m(n,a-1),e.preventDefault()):27==r&&(x.val(S),x.caret(0,y()),e.preventDefault())}function v(t){var n,a,i,l=t.which,u=x.caret();t.ctrlKey||t.altKey||t.metaKey||32>l||l&&(0!==u.end-u.begin&&(k(u.begin,u.end),m(u.begin,u.end-1)),n=c(u.begin-1),h>n&&(a=String.fromCharCode(l),s[n].test(a)&&(p(n),R[n]=a,b(),i=c(n),o?setTimeout(e.proxy(e.fn.caret,x,i),0):x.caret(i),r.completed&&i>=h&&r.completed.call(x))),t.preventDefault())}function k(e,t){var n;for(n=e;t>n&&h>n;n++)s[n]&&(R[n]=r.placeholder)}function b(){x.val(R.join(\"\"))}function y(e){var t,n,a=x.val(),i=-1;for(t=0,pos=0;h>t;t++)if(s[t]){for(R[t]=r.placeholder;pos++<a.length;)if(n=a.charAt(pos-1),s[t].test(n)){R[t]=n,i=t;break}if(pos>a.length)break}else R[t]===a.charAt(pos)&&t!==u&&(pos++,i=t);return e?b():u>i+1?(x.val(\"\"),k(0,h)):(b(),x.val(x.val().substring(0,i+1))),u?t:f}var x=e(this),R=e.map(t.split(\"\"),function(e){return\"?\"!=e?l[e]?r.placeholder:e:void 0}),S=x.val();x.data(e.mask.dataName,function(){return e.map(R,function(e,t){return s[t]&&e!=r.placeholder?e:null}).join(\"\")}),x.attr(\"readonly\")||x.one(\"unmask\",function(){x.unbind(\".mask\").removeData(e.mask.dataName)}).bind(\"focus.mask\",function(){clearTimeout(n);var e;S=x.val(),e=y(),n=setTimeout(function(){b(),e==t.length?x.caret(0,e):x.caret(e)},10)}).bind(\"blur.mask\",function(){y(),x.val()!=S&&x.change()}).bind(\"keydown.mask\",g).bind(\"keypress.mask\",v).bind(a,function(){setTimeout(function(){var e=y(!0);x.caret(e),r.completed&&e==x.val().length&&r.completed.call(x)},0)}),y()}))}})})(jQuery);","/*\n  @author: remy sharp / http://remysharp.com\n  @params:\n    feedback - the selector for the element that gives the user feedback. Note that this will be relative to the form the plugin is run against.\n    hardLimit - whether to stop the user being able to keep adding characters. Defaults to true.\n    useInput - whether to look for a hidden input named 'maxlength' instead of the maxlength attribute. Defaults to false.\n    words - limit by characters or words, set this to true to limit by words. Defaults to false.\n  @license: Creative Commons License - ShareAlike http://creativecommons.org/licenses/by-sa/3.0/\n  @version: 1.2\n  @changes: code tidy via Ariel Flesler and fix when pasting over limit and including \\t or \\n\n*/\n\n(function ($) {\n\n$.fn.maxlength = function (settings) {\n\n    if (typeof settings == 'string') {\n        settings = { feedback : settings };\n    }\n\n    settings = $.extend({}, $.fn.maxlength.defaults, settings);\n\n    function length(el) {\n    \tvar parts = el.value;\n    \tif ( settings.words )\n    \t\tparts = el.value.length ? parts.split(/\\s+/) : { length : 0 };\n    \treturn parts.length;\n    }\n    \n    return this.each(function () {\n        var field = this,\n        \t$field = $(field),\n        \t$form = $(field.form),\n        \tlimit = settings.useInput ? $form.find('input[name=maxlength]').val() : $field.attr('maxlength'),\n        \t$charsLeft = $form.find(settings.feedback);\n\n    \tfunction limitCheck(event) {\n        \tvar len = length(this),\n        \t    exceeded = len >= limit,\n        \t\tcode = event.keyCode;\n\n        \tif ( !exceeded )\n        \t\treturn;\n\n            switch (code) {\n                case 8:  // allow delete\n                case 9:\n                case 17:\n                case 36: // and cursor keys\n                case 35:\n                case 37: \n                case 38:\n                case 39:\n                case 40:\n                case 46:\n                case 65:\n                    return;\n\n                default:\n                    return settings.words && code != 32 && code != 13 && len == limit;\n            }\n        }\n\n\n        var updateCount = function () {\n            var len = length(field),\n            \tdiff = limit - len;\n\n            $charsLeft.html( diff || \"0\" );\n\n            // truncation code\n            if (settings.hardLimit && diff < 0) {\n            \tfield.value = settings.words ? \n            \t    // split by white space, capturing it in the result, then glue them back\n            \t\tfield.value.split(/(\\s+)/, (limit*2)-1).join('') :\n            \t\tfield.value.substr(0, limit);\n\n                updateCount();\n            }\n        };\n\n        $field.keyup(updateCount).change(updateCount);\n        if (settings.hardLimit) {\n            $field.keydown(limitCheck);\n        }\n\n        updateCount();\n    });\n};\n\n$.fn.maxlength.defaults = {\n    useInput : false,\n    hardLimit : true,\n    feedback : '.charsLeft',\n    words : false\n};\n\n})(jQuery);"],"sourceRoot":"/source/"}