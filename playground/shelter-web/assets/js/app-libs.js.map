{"version":3,"sources":["comtec.global.constants.js","comtec.startup.js","comtec.model.js","comtec.controler.names.js","comtec.event.names.js","comtec.route.names.js","comtec.message.types.js","comtec.styles.js","comtec.messages.js","comtec.config.constants.js","comtec.helpers.js","comtec.security.js","comtec.employeeColumnLookup.js","comtec.ajax.util.js","comtec.ds.common.js","comtec.ds.admin.agency.js","comtec.ds.admin.department.js","comtec.ds.admin.medicalconditiontier.js","comtec.ds.admin.sheltertype.js","comtec.ds.admin.staffspecialty.js","comtec.ds.admin.transporttype.js","comtec.ds.admin.medicalcondition.js","comtec.ds.admin.stafftype.js","comtec.ds.admin.sheltreeemployeeratio.js","comtec.ds.admin.disposition.js","comtec.ds.admin.shelterIdentification.js","comtec.ds.admin.equipmentSupply.js","comtec.ds.shlt.shelter.js","comtec.ds.emp.employee.js","comtec.ds.emp.empattendance.js","comtec.ds.sheltree.sheltree.js","app-ui-scripts.js"],"names":[],"mappingsxlJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3aprpvtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACttttttvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzafile":"app-libs.js","sourcesContent":["/// <reference path=\"C:\\Dev\\tfs\\ComTecCollection\\Test-TFVC\\Apps\\Dev\\Shelter\\Ver1.0\\Src\\Shelter.Web\\01 PL\\Shelter.Web\\src/modules/modules.js\" />\n\n//when adding a variable to this file make sure, there are no name collisions\n\n//global varibales in total application\n\n//Service layer deployed location (Without security)\n//var globalBaseServiceUrl = 'https://beta.comtecinfo.com/IMServiceDemo/api/';\n\n//Servicelayer on local machine.\n//var globalBaseServiceUrl = 'http://localhost:7222/api/';\nvar globalBaseServiceUrl = 'https://beta.comtecinfo.com/sheltersl/api/';\n\n\n\n//Roles\n\nvar globalAdministratorId = 4;\nvar globalAssociationId = 34;\nvar globalCallCenterId = 7;\nvar globalDrcId = 5;\nvar globalDataCellId = 35;\nvar globalFacilityUpdateId = 3;\nvar globalFacilityReadOnlyId = 2;\nvar globalSuperAdminId = 20;\n\n\n//Employee template URL\nvar globalEmployeeTemplateURL = \"http://localhost/FileRepository/ShelterTemplates/Employee_Upload-Template.xlsx\";\n\n\n","// Files Order\n//1.  comtec.startup.js file\n//2. constants and utility functions, these files are independent, does not depend on any other files except comtec.startup.js.\n//3. helpers\n//4. errors\n//5. ajax util\n//6. data source files, currently each data source file is independent and does not depend on any other data source files.\n\n\n/// <reference path=\"comtec.startup.js\" />\n\n\n// constants and util functions\n\n/// <reference path=\"common/comtec.model.js\" />\n/// <reference path=\"common/comtec.controler.names.js\" />\n/// <reference path=\"common/comtec.event.names.js\" />\n/// <reference path=\"common/comtec.route.names.js\" />\n/// <reference path=\"common/comtec.message.types.js\" />\n/// <reference path=\"common/comtec.styles.js\" />\n/// <reference path=\"common/comtec.messages.js\" />\n\n\n/// <reference path=\"comtec.helpers.js\" />\n/// <reference path=\"comtec.error.js\" />\n/// <reference path=\"comtec.ajax.util.js\" />\n\n\n// Data sorce files\n/// <reference path=\"datasources/comtec.ds.admin.status.js\" />\n/// <reference path=\"datasources/comtec.ds.admin.bedtype.js\" />\n/// <reference path=\"datasources/comtec.ds.admin.hssbedtype.js\" />\n/// <reference path=\"datasources/comtec.ds.admin.genservice.js\" />\n/// <reference path=\"datasources/comtec.ds.admin.outcome.js\" />\n/// <reference path=\"datasources/comtec.ds.admin.reasons.js\" />\n/// <reference path=\"datasources/comtec.ds.admin.promptins.js\" />\n/// <reference path=\"datasources/comtec.ds.admin.scripts.js\" />\n/// <reference path=\"datasources/comtec.ds.admin.medicalequip.js\" />\n/// <reference path=\"datasources/comtec.ds.admin.evacdestination.js\" />\n/// <reference path=\"datasources/comtec.ds.admin.utilityprovider.js\" />\n/// <reference path=\"datasources/comtec.ds.admin.enum.js\" />\n/// <reference path=\"datasources/comtec.ds.admin.transportation.js\" />\n/// <reference path=\"datasources/comtec.ds.admin.disposition.js\" />\n/// <reference path=\"datasources/comtec.ds.admin.transporttype.js\" />\n/// <reference path=\"datasources/comtec.ds.admin.evacueetype.js\" />\n\n\n/// <reference path=\"datasources/comtec.ds.su.facilitycensus.js\" />\n/// <reference path=\"datasources/comtec.ds.su.generatorfacility.js\" />\n/// <reference path=\"datasources/comtec.ds.su.facilitycensus.js\" />\n\n\n\nvar $ct = $ct || {};\n$ct.ds = $ct.ds || {};\n$ct.ds.admin = $ct.ds.admin || {};\n$ct.ds.shlt = $ct.ds.shlt || {};\n$ct.ds.emp = $ct.ds.emp || {};\n$ct.ds.sheltree = $ct.ds.sheltree || {};\n\n","\n$ct.constants = function () {\n\n\n    var emptyGUID = \"00000000-0000-0000-0000-000000000000\";\n\n    var getemptyGUID = function () {\n        return emptyGUID;\n    };\n\n    var newRecordId = \"-1\";\n\n    var getNewRecordId = function () {\n        return newRecordId;\n    };\n\n    var getHttpVerb = \"GET\";\n\n    var getGetHttpVerb = function () {\n        return getHttpVerb;\n    };\n\n    var postHttpVerb = \"POST\";\n\n    var getPostHttpVerb = function () {\n        return postHttpVerb;\n    };\n\n    var dataType = 'json';\n    var getDataType = function () {\n        return dataType;\n    };\n\n    var contentType = 'application/json; charset=utf-8';\n\n    var getContentType = function () {\n        return contentType;\n    };\n\n    var Key = 'Comtec@12#';\n    var getKey = function () {\n        return Key;\n    };\n\n    var ClientTag = 'ShelterWeb';\n    var getClientTag = function () {\n        return ClientTag;\n    };\n\n    var SessionToken = [];\n    var getSessionToken = function () {\n        return SessionToken;\n    };\n\n    var ServiceRequest = {\n        ClientTag: ClientTag,\n        AccessToken: 'access',\n        InfSystem: 'Comtec',\n        RequestId: '',\n        SessionToken: [],\n        Data: null\n    };\n\n    var getServiceRequest = function () {\n        return ServiceRequest;\n    };\n\n\n\n    // Exposed objects and parameters\n    return {\n        getemptyGUID: getemptyGUID,\n\n        //AJAX Related\n        getGetHttpVerb: getGetHttpVerb,\n        getPostHttpVerb: getPostHttpVerb,\n        getDataType: getDataType,\n        getContentType: getContentType,\n\n        //Authentical relates  \n        getKey: getKey,\n        getClientTag: getClientTag,\n        getSessionToken: getSessionToken,\n        SessionToken: SessionToken,\n        getServiceRequest: getServiceRequest,\n        getNewRecordId: getNewRecordId\n\n    };\n} ();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","//Controler Names\n$ct.cn = function () {\n\n    var baseServiceUrl = globalBaseServiceUrl;\n\n    \n    //Start of admin controllers\n\n    var agencyUrl = baseServiceUrl + \"Agency/\"\n    var getAgencyUrl = function () {\n        return agencyUrl;\n    };\n\n    var medicalConditionTierUrl = baseServiceUrl + \"MedicalConditionTier/\"\n    var getMedicalConditionTierUrl = function () {\n        return medicalConditionTierUrl;\n    };\n\n    var shelterTypeUrl = baseServiceUrl + \"ShelterType/\"\n    var getShelterTypeUrl = function () {\n        return shelterTypeUrl;\n    };\n\n    var staffSpecialtyUrl = baseServiceUrl + \"StaffSpeciality/\"\n    var getStaffSpecialtyUrl = function () {\n        return staffSpecialtyUrl;\n    };\n    //end of admin controllers\n\n\n    // start of common controllers\n\n    var commonServicesUrl = baseServiceUrl + \"KeyValue/\"\n    var getcommonServicesUrl = function () {\n        return commonServicesUrl;\n    };\n    var departmentServiceUrl = baseServiceUrl + \"Department/\"\n    var getDepartmentServiceUrl = function () {\n        return departmentServiceUrl;\n    };\n    var staffTypeServiceUrl = baseServiceUrl + \"StaffType/\"\n    var getStaffTypeServiceUrl = function () {\n        return staffTypeServiceUrl;\n    };\n    var medicalConditionServiceUrl = baseServiceUrl + \"MedicalCondition/\"\n    var getmedicalConditionServiceUrl = function () {\n        return medicalConditionServiceUrl;\n    };\n    var transportationTypeServiceUrl = baseServiceUrl + \"Transportationtype/\"\n    var getTransportationTypeServiceUrl = function () {\n        return transportationTypeServiceUrl;\n    };\n    var sheltreeEmployeeRatioUrl = baseServiceUrl + \"SheltreeEmployeeRatio/\"\n    var getSheltreeEmployeeRatioUrl = function () {\n        return sheltreeEmployeeRatioUrl;\n    };\n\n\n    var equipmentSupplyUrl = baseServiceUrl + \"EquipmentSupply/\"\n    var getEquipmentSupplyUrl = function () {\n        return equipmentSupplyUrl;\n    };\n\n    var shelterIdentificationUrl = baseServiceUrl + \"ShelterIdentification/\"\n    var getShelterIdentificationUrl = function () {\n        return shelterIdentificationUrl;\n    };\n\n    // Start of other controllers\n\n\n    var employeeUrl = baseServiceUrl + \"Employee/\"\n    var getEmployeeUrl = function () {\n        return employeeUrl;\n    };\n\n    var shelterUrl = baseServiceUrl + \"Shelter/\"\n    var getShelterUrl = function () {\n        return shelterUrl;\n    };\n\n    var employeeAttendanceUrl = baseServiceUrl + \"EmployeeAttendance/\"\n    var getEmployeeAttendanceUrl = function () {\n        return employeeAttendanceUrl;\n    };\n\n\n   \n    var DispositionUrl = baseServiceUrl + \"Disposition/\"\n    var getDispositionUrl = function () {\n        return DispositionUrl;\n    };\n    // start of shelterstaus controller\n    var shelterStatusUrl = baseServiceUrl + \"ShelterStatus/\"\n    var getShelterStatusUrl = function () {\n        return shelterStatusUrl;\n    };\n    //end of shelterstaus controller\n\n\n    // start of event controller\n    var eventUrl = baseServiceUrl + \"Event/\"\n    var getEventUrl = function () {\n        return eventUrl;\n    };\n    //end of event controller\n\n    return {\n        //Start of admin controllers\n        getAgencyUrl: getAgencyUrl,\n        getMedicalConditionTierUrl: getMedicalConditionTierUrl,\n        getShelterTypeUrl: getShelterTypeUrl,\n        getStaffSpecialtyUrl: getStaffSpecialtyUrl,\n        getDispositionUrl:getDispositionUrl,\n        //end of admin controllers\n\n        // start of common controllers\n        getcommonServicesUrl: getcommonServicesUrl,\n        getDepartmentServiceUrl: getDepartmentServiceUrl,\n        getStaffTypeServiceUrl: getStaffTypeServiceUrl,\n        getmedicalConditionServiceUrl: getmedicalConditionServiceUrl,\n        getTransportationTypeServiceUrl: getTransportationTypeServiceUrl,\n        getSheltreeEmployeeRatioUrl: getSheltreeEmployeeRatioUrl,\n        getEquipmentSupplyUrl: getEquipmentSupplyUrl,\n        getShelterIdentificationUrl:getShelterIdentificationUrl,\n        // end of common controllers\n\n        // Start of other controllers\n        getShelterUrl : getShelterUrl,\n        getEmployeeUrl: getEmployeeUrl,\n\n        // start of shelterstaus controller\n        getShelterStatusUrl: getShelterStatusUrl,\n        //end of shelterstaus controller\n\n        // start of event controller\n        getEventUrl: getEventUrl,\n        //end of event controller\n    \n        getEmployeeAttendanceUrl: getEmployeeAttendanceUrl\n       \n\n\n    };\n} ();\n\n","//Event Names\n$ct.en = function () {\n\n    //start of application independant common events\n\n    var updateSecuritySettings = \"UPDATE_SECURITY_SETTINGS\";\n    var getUpdateSecuritySettings = function () {\n        return updateSecuritySettings;\n    };\n\n    var doNotHavePermission = \"DO_NOT_HAVE_PERMISSION\";\n    var getDoNotHavePermission = function () {\n        return doNotHavePermission;\n    };\n\n    var goToNoPermissionPage = \"GO_TO_NO_PERMISSION_PAGE\";\n    var getGoToNoPermissionPage = function () {\n        return goToNoPermissionPage;\n    };\n\n    var showValidationMsg = \"SHOW_VALIDATION_MESSAGE\";\n\n    var getShowValidationMsg = function () {\n        return showValidationMsg;\n    };\n\n    var showSuccMsg = \"SHOW_SUCCESS_MESSAGE\";\n\n    var getShowSuccMsg = function () {\n        return showSuccMsg;\n    };\n\n    var showErrorMsg = \"SHOW_ERROR_MESSAGE\";\n\n    var getShowErrorMsg = function () {\n        return showErrorMsg;\n    };\n\n    var showErrorMsgJS = \"SHOW_ERROR_MESSAGE_JS\";\n\n    var getShowErrorMsgJS = function () {\n        return showErrorMsgJS;\n    };\n\n    var hideErrorMsg = \"HIDE_ERROR_MESSAGE\";\n\n    var getHideErrorMsg = function () {\n        return hideErrorMsg;\n    };\n\n\n    var refreshView = \"REFRESH_VIEW\";\n\n    var getRefreshView = function () {\n        return refreshView;\n    };\n\n\n    var goToHome = \"GO_TO_HOME\";\n\n    var getGoToHome = function () {\n        return goToHome;\n    };\n\n\n    //end of application independant common events\n\n\n\n    \n\n    //start of admin events  \n\n    var displayAgencyList = \"DISPLAY_AGENCY_LIST\";\n\n    var getDisplayAgencyList = function () {\n        return displayAgencyList;\n    };\n\n\n    var agencyCreatedOrUpdated = \"AGENCY_CREATED_OR_UPDATED\";\n\n    var getAgencyCreatedOrUpdated = function () {\n        return agencyCreatedOrUpdated;\n    };\n\n\n    var displayDepartmentList = \"DISPLAY_DEPARTMENT_LIST\";\n\n    var getDisplayDepartmentList = function () {\n        return displayDepartmentList;\n    };\n\n\n    var departmentCreatedOrUpdated = \"DEPARTMENT_CREATED_OR_UPDATED\";\n\n    var getDepartmentCreatedOrUpdated = function () {\n        return departmentCreatedOrUpdated;\n    };\n\n\n    var displayMedicalConditionList = \"DISPLAY_MEDICALCONDITION_LIST\";\n\n    var getDisplayMedicalConditionList = function () {\n        return displayMedicalConditionList;\n    };\n\n\n    var medicalConditionCreatedOrUpdated = \"MEDICALCONDITION_CREATED_OR_UPDATED\";\n\n    var getMedicalConditionCreatedOrUpdated = function () {\n        return medicalConditionCreatedOrUpdated;\n    };\n\n\n    var displayMedicalConditionTierList = \"DISPLAY_MEDICALCONDITIONTIER_LIST\";\n\n    var getDisplayMedicalConditionTierList = function () {\n        return displayMedicalConditionTierList;\n    };\n\n\n    var medicalConditionTierCreatedOrUpdated = \"MEDICALCONDITIONTIER_CREATED_OR_UPDATED\";\n\n    var getMedicalConditionTierCreatedOrUpdated = function () {\n        return medicalConditionTierCreatedOrUpdated;\n    };\n\n\n    var displayShelterTypeList = \"DISPLAY_SHELTERTYPE_LIST\";\n\n    var getDisplayShelterTypeList = function () {\n        return displayShelterTypeList;\n    };\n\n\n    var shelterTypeCreatedOrUpdated = \"SHELTERTYPE_CREATED_OR_UPDATED\";\n\n    var getShelterTypeCreatedOrUpdated = function () {\n        return shelterTypeCreatedOrUpdated;\n    };\n\n\n    var displaySheltreeEmployeeRatioList = \"DISPLAY_SHELTREEEMPLOYEERATIO_LIST\";\n\n    var getDisplaySheltreeEmployeeRatioList = function () {\n        return displaySheltreeEmployeeRatioList;\n    };\n\n\n    var sheltreeEmployeeRatioCreatedOrUpdated = \"SHELTREEEMPLOYEERATIO_CREATED_OR_UPDATED\";\n\n    var getSheltreeEmployeeRatioCreatedOrUpdated = function () {\n        return sheltreeEmployeeRatioCreatedOrUpdated;\n    };\n\n\n    var displayStaffSpecialtyList = \"DISPLAY_STAFFSPECIALTY_LIST\";\n\n    var getDisplayStaffSpecialtyList = function () {\n        return displayStaffSpecialtyList;\n    };\n\n\n    var staffSpecialtyCreatedOrUpdated = \"STAFFSPECIALTY_CREATED_OR_UPDATED\";\n\n    var getStaffSpecialtyCreatedOrUpdated = function () {\n        return staffSpecialtyCreatedOrUpdated;\n    };\n\n\n    var displayStaffTypeList = \"DISPLAY_STAFFTYPE_LIST\";\n\n    var getDisplayStaffTypeList = function () {\n        return displayStaffTypeList;\n    };\n\n\n    var staffTypeCreatedOrUpdated = \"STAFFTYPE_CREATED_OR_UPDATED\";\n\n    var getStaffTypeCreatedOrUpdated = function () {\n        return staffTypeCreatedOrUpdated;\n    };\n\n\n    var displayTransportTypeList = \"DISPLAY_TRANSPORTATIONTYPE_LIST\";\n\n    var getDisplayTransportTypeList = function () {\n        return displayTransportTypeList;\n    };\n\n\n    var transportTypeCreatedOrUpdated = \"TRANSPORTATIONTYPE_CREATED_OR_UPDATED\";\n\n    var getTransportTypeCreatedOrUpdated = function () {\n        return transportTypeCreatedOrUpdated;\n    };\n\n\n    var displayDispositionList = \"DISPLAY_DISPOSITION_LIST\";\n\n    var getDisplayDispositionList = function () {\n        return displayDispositionList;\n    };\n\n\n    var dispositionCreatedOrUpdated = \"DISPOSITION_CREATED_OR_UPDATED\";\n\n    var getDispositionCreatedOrUpdated = function () {\n        return dispositionCreatedOrUpdated;\n    };\n\n    var displayEquipmentSupplyList = \"DISPLAY_EquipmentSupply_LIST\";\n\n    var getDisplayEquipmentSupplyList = function () {\n        return displayEquipmentSupplyList;\n    };\n\n    var equipmentSupplyCreatedOrUpdated = \"EQUIPMENTSUPPLY_CREATED_OR_UPDATED\";\n\n    var getEquipmentSupplyCreatedOrUpdated = function () {\n        return equipmentSupplyCreatedOrUpdated;\n    };\n\n    var displayShelterIdentificationList = \"DISPLAY_SHELTERIDENTIFICATION_LIST\";\n\n    var getDisplayShelterIdentificationList = function () {\n        return displayShelterIdentificationList;\n    };\n    \n\n    var ShelterIdentificationCreatedOrUpdated = \"SHELTERIDENTIFICATION_CREATED_OR_UPDATED\";\n\n    var getShelterIdentificationCreatedOrUpdated = function () {\n        return ShelterIdentificationCreatedOrUpdated;\n    };\n\n    //end of admin events\n\n    //start of employee events  \n\n\n    //Use this event when user clicks on employee menu item second time onwords\n    var employeeMenuItemClicked = \"EMPLOYEE_MENU_ITEM_CLICKED\";\n\n    var getEmployeeMenuItemClicked = function () {\n        return employeeMenuItemClicked;\n    };\n\n    //to refresh current employee page with newly selected data in employee header(Shelter type and Shelter)\n    var employeeHeaderDataChanged = \"EMPLOYEE_HEADER_DATA_CHANGED\";\n\n    var getEmployeeHeaderDataChanged = function () {\n        return employeeHeaderDataChanged;\n    };\n\n    //to load shelter type, shelter drop down lists, when user click on employee menu item first time\n    var loadEmployeeHeaderInfo = \"LOAD_EMPLOYEE_HEADER_INFO\";\n\n    var getLoadEmployeeHeaderInfo = function () {\n        return loadEmployeeHeaderInfo;\n    };\n\n\n    //to show shelter dropdown lists in employee shelter header\n    var showEmployeeShelterHeader = \"SHOW_EMPLOYEE_SHELTER_HEADER\";\n\n    var getShowEmployeeShelterHeader = function () {\n        return showEmployeeShelterHeader;\n    };\n\n    //to hide shelter dropdown lists in employee shelter header\n    var hideEmployeeShelterHeader = \"HIDE_EMPLOYEE_SHELTER_HEADER\";\n\n    var getHideEmployeeShelterHeader = function () {\n        return hideEmployeeShelterHeader;\n    };\n\n\n    var hideEmployeeHeader = \"HIDE_EMPLOYEE_HEADER\";\n\n    var getHideEmployeeHeader = function () {\n        return hideEmployeeHeader;\n    };\n\n    var hideEmployeeHeaderNav = \"HIDE_EMPLOYEE_HEADER_NAV\";\n\n    var getHideEmployeeHeaderNavigation = function () {\n        return hideEmployeeHeaderNav;\n    };\n\n\n    var showActiveEmployeeHeader = \"SHOW_ACTIVE_EMPLOYEE_HEADER\";\n\n    var getShowActiveEmployeeHeader = function () {\n        return showActiveEmployeeHeader;\n    };\n\n    var employeeCreatedOrUpdated = \"EMPLOYEE_CREATED_OR_UPDATED\";\n\n    var getEmployeeCreatedOrUpdated = function () {\n        return employeeCreatedOrUpdated;\n    };\n\n\n    var employeeRecordReload = \"RELOAD_EMPLOYEE_RECORD\";\n\n    var getEmployeeRecordReload = function () {\n        return employeeRecordReload;\n    };\n\n    var manageEmployeeClicked = \"MANAGE_EMPLOYEE_CLICKED\";\n    var getManageEmployeeClicked = function () {\n        return manageEmployeeClicked;\n    };\n\n\n    var manageEmployeeExpandedClicked = \"MANAGE_EMPLOYEE_EXPANDED_CLICKED\";\n    var getManageEmployeeExpandedClicked = function () {\n        return manageEmployeeExpandedClicked;\n    };\n\n    var employeeExpandedCreatedOrUpdated = \"EMPLOYEE_EXPANDED_CREATED_OR_UPDATED\";\n\n    var getEmployeeExpandedCreatedOrUpdated = function () {\n        return employeeExpandedCreatedOrUpdated;\n    };\n\n    //end of employee events\n \n    //Start  of employee attendence events\n\n    var employeeAttendenceComments = \"COMMENT_UPDATE\";\n\n    var getEmployeeAttendenceComments = function () {\n        return employeeAttendenceComments;\n    };\n\n    var employeeAttendenceList = \"DISPLAY_EMPLOYEEATTENDENCE_LIST\";\n\n    var getEmployeeAttendenceList = function () {\n        return employeeAttendenceList;\n    };\n\n    var employeeAttendanceUpdated = \"EMPLOYEEATTENDENCE_CREATED_OR_UPDATED\";\n    var getEmployeeAttendanceUpdated = function () {\n        return employeeAttendanceUpdated;\n    };\n\n\n\n    //End  of employee attendence events\n    return {\n\n        //start of application independant common events\n\n        getUpdateSecuritySettings: getUpdateSecuritySettings,\n        getDoNotHavePermission: getDoNotHavePermission, \n        getGoToNoPermissionPage : getGoToNoPermissionPage,\n        getShowValidationMsg: getShowValidationMsg,\n        getShowSuccMsg: getShowSuccMsg,\n        getShowErrorMsg: getShowErrorMsg,\n        getShowErrorMsgJS: getShowErrorMsgJS,\n        getHideErrorMsg: getHideErrorMsg,\n        getRefreshView: getRefreshView,\n        getGoToHome: getGoToHome,\n\n        //end of application independant common events\n\n\n        //start of admin events    \n        \n        getDisplayAgencyList: getDisplayAgencyList,\n        getAgencyCreatedOrUpdated: getAgencyCreatedOrUpdated,\n        getDisplayDepartmentList: getDisplayDepartmentList,\n        getDepartmentCreatedOrUpdated: getDepartmentCreatedOrUpdated,\n        getDisplayMedicalConditionList: getDisplayMedicalConditionList,\n        getMedicalConditionCreatedOrUpdated: getMedicalConditionCreatedOrUpdated,\n        getDisplayMedicalConditionTierList: getDisplayMedicalConditionTierList,\n        getMedicalConditionTierCreatedOrUpdated: getMedicalConditionTierCreatedOrUpdated,\n        getDisplayShelterTypeList: getDisplayShelterTypeList,\n        getShelterTypeCreatedOrUpdated: getShelterTypeCreatedOrUpdated,\n        getDisplaySheltreeEmployeeRatioList: getDisplaySheltreeEmployeeRatioList,\n        getSheltreeEmployeeRatioCreatedOrUpdated: getSheltreeEmployeeRatioCreatedOrUpdated,\n        getDisplayStaffSpecialtyList: getDisplayStaffSpecialtyList,\n        getStaffSpecialtyCreatedOrUpdated: getStaffSpecialtyCreatedOrUpdated,\n        getDisplayStaffTypeList: getDisplayStaffTypeList,\n        getStaffTypeCreatedOrUpdated: getStaffTypeCreatedOrUpdated,\n        getDisplayTransportTypeList: getDisplayTransportTypeList,\n        getTransportTypeCreatedOrUpdated: getTransportTypeCreatedOrUpdated,\n        getDisplayDispositionList: getDisplayDispositionList,\n        getDispositionCreatedOrUpdated: getDispositionCreatedOrUpdated,\n        getDisplayEquipmentSupplyList: getDisplayEquipmentSupplyList,\n        getEquipmentSupplyCreatedOrUpdated: getEquipmentSupplyCreatedOrUpdated,\n        getDisplayShelterIdentificationList:getDisplayShelterIdentificationList,\n        getShelterIdentificationCreatedOrUpdated:getShelterIdentificationCreatedOrUpdated,\n\n        //end of admin events  \n\n\n        //start of employee events    \n        \n        getEmployeeMenuItemClicked : getEmployeeMenuItemClicked,\n        getEmployeeHeaderDataChanged : getEmployeeHeaderDataChanged,\n        getLoadEmployeeHeaderInfo : getLoadEmployeeHeaderInfo,\n        getShowEmployeeShelterHeader : getShowEmployeeShelterHeader,\n        getHideEmployeeShelterHeader : getHideEmployeeShelterHeader,\n        getHideEmployeeHeader : getHideEmployeeHeader,\n        getHideEmployeeHeaderNavigation : getHideEmployeeHeaderNavigation,\n        getShowActiveEmployeeHeader : getShowActiveEmployeeHeader,\n        getManageEmployeeClicked: getManageEmployeeClicked,\n        getManageEmployeeExpandedClicked: getManageEmployeeExpandedClicked,\n        getEmployeeCreatedOrUpdated: getEmployeeCreatedOrUpdated,\n        getEmployeeRecordReload:getEmployeeRecordReload,\n        getEmployeeExpandedCreatedOrUpdated: getEmployeeExpandedCreatedOrUpdated,\n\n        //end of employee events \n\n\n        //start of employee  attendence events    \n        getEmployeeAttendenceComments: getEmployeeAttendenceComments,\n        getEmployeeAttendanceUpdated: getEmployeeAttendanceUpdated,\n        getEmployeeAttendenceList: getEmployeeAttendenceList\n\n\n        //end of employee  attendenceevents \n    };\n} ();","\n//Route names\n// When ever route name in the module is changed change corresponding name here also.\n//When new route is added in module, add new route here also.\n$ct.rn = function () {\n\n    /*start of other routes */\n\n    var noPermission = \"nopermission\";\n\n    var getNoPermission = function () {\n        return noPermission;\n    };\n\n    /*end of other routes */\n\n\n    \n    //start of admin routes\n\n    var agencyList = \"agencylist\";\n\n    var getAgencyList = function () {\n        return agencyList;\n    };\n\n\n    var agency = \"agency\";\n\n    var getAgency = function () {\n        return agency;\n    };\n\n\n    var departmentList = \"departmentlist\";\n\n    var getDepartmentList = function () {\n        return departmentList;\n    };\n\n\n    var department = \"department\";\n\n    var getDepartment = function () {\n        return department;\n    };\n\n\n    var medicalConditionList = \"medicalconditionlist\";\n\n    var getMedicalConditionList = function () {\n        return medicalConditionList;\n    };\n\n\n    var medicalCondition = \"medicalcondition\";\n\n    var getMedicalCondition = function () {\n        return medicalCondition;\n    };\n\n\n    var medicalConditionTierList = \"medicalconditiontierlist\";\n\n    var getMedicalConditionTierList = function () {\n        return medicalConditionTierList;\n    };\n\n\n    var medicalConditionTier = \"medicalconditiontier\";\n\n    var getMedicalConditionTier = function () {\n        return medicalConditionTier;\n    };\n\n\n    var shelterTypeList = \"sheltertypelist\";\n\n    var getShelterTypeList = function () {\n        return shelterTypeList;\n    };\n\n\n    var shelterType = \"sheltertype\";\n\n    var getShelterType = function () {\n        return shelterType;\n    };\n\n\n    var sheltreeEmployeeRatioList = \"sheltreeemployeeratiolist\";\n\n    var getSheltreeEmployeeRatioList = function () {\n        return sheltreeEmployeeRatioList;\n    };\n\n\n    var sheltreeEmployeeRatio = \"sheltreeemployeeratio\";\n\n    var getSheltreeEmployeeRatio = function () {\n        return sheltreeEmployeeRatio;\n    };\n\n\n    var staffSpecialtyList = \"staffspecialtylist\";\n\n    var getStaffSpecialtyList = function () {\n        return staffSpecialtyList;\n    };\n\n\n    var staffSpecialty = \"staffspecialty\";\n\n    var getStaffSpecialty = function () {\n        return staffSpecialty;\n    };\n\n\n\n    var staffTypeList = \"stafftypelist\";\n\n    var getStaffTypeList = function () {\n        return staffTypeList;\n    };\n\n\n    var staffType = \"stafftype\";\n\n    var getStaffType = function () {\n        return staffType;\n    };\n\n\n    var transportTypeList = \"transportationtypelist\";\n\n    var getTransportTypeList = function () {\n        return transportTypeList;\n    };\n\n\n    var transportType = \"transportationtype\";\n\n    var getTransportType = function () {\n        return transportType;\n    };\n\n\n    var dispositionList = \"dispositionlist\";\n\n    var getDispositionList = function () {\n        return dispositionList;\n    };\n\n\n    var disposition = \"disposition\";\n\n    var getDisposition = function () {\n        return disposition;\n    };\n\n\n    var equipmentSupplyList = \"equipmentsupplylist\";\n\n    var getequipmentSupplyList = function () {\n        return equipmentSupplyList;\n    };\n\n\n    var equipmentSupply = \"equipmentsupply\";\n\n    var getequipmentSupply = function () {\n        return equipmentSupply;\n    };\n\n\n    var shelterIdentificationList = \"shelteridentificationlist\";\n\n    var getshelterIdentificationList = function () {\n        return shelterIdentificationList;\n    };\n\n\n    var shelterIdentification = \"shelteridentification\";\n\n    var getshelterIdentification = function () {\n        return shelterIdentification;\n    };\n\n   \n    //end of admin routes\n    \n\n    //start of shelter routes\n\n\n    var shelterStatus = \"shelterstatus\";\n\n    var getShelterStatus = function () {\n        return shelterStatus;\n    };\n\n\n    //end of shelter routes\n\n\n\n    //start of employee routes\n\n\n    var employeeList = \"employeelist\";\n\n    var getEmployeeList = function () {\n        return employeeList;\n    };\n    \n\n    var employeeExtendedList = \"employeeextendedlist\";\n\n    var getEmployeeExtendedList = function () {\n        return employeeExtendedList;\n    };\n\n\n    var employee = \"employee\";\n\n    var getEmployee = function () {\n        return employee;\n    };\n    \n\n    var bulkUpdateEmployee = \"bulkupdateemployee\";\n\n    var getBulkUpdateEmployee = function () {\n        return bulkUpdateEmployee;\n    };\n\n    var bulkUpdateEmployeeExtended = \"bulkupdateemployeeextended\";\n\n    var getBulkUpdateEmployeeExtended = function () {\n        return bulkUpdateEmployeeExtended;\n    };\n    \n\n    var downloadEmployee = \"downloademployee\";\n\n    var getDownloadEmployee = function () {\n        return downloadEmployee;\n    };\n\n\n    var uploadEmployee = \"uploademployee\";\n\n    var getUploadEmployee = function () {\n        return uploadEmployee;\n    };\n\n    var employeeAttendance = \"employeeattendance\";\n\n    var getEmployeeAttendance = function () {\n        return employeeAttendance;\n    };\n    \n    var employeeAttendanceComments = \"comments\";\n\n    var getEmployeeAttendanceComments = function () {\n        return employeeAttendanceComments;\n    };\n\n\n    var bulkUpdateEmployeeAttendance = \"bulkupdateemployeeattendance\";\n\n    var getBulkUpdateEmployeeAttendance = function () {\n        return bulkUpdateEmployeeAttendance;\n    };\n\n\n    var multiFacilityEmployeeAttendance = \"multifacilityemployeeattendance\";\n\n    var getMultiFacilityEmployeeAttendance = function () {\n        return multiFacilityEmployeeAttendance;\n    };\n\n    var multiFacilityEmployeeExtendedList = \"multifacilityemployeeextendedlist\";\n\n    var getMultiFacilityEmployeeExtendedList = function () {\n        return multiFacilityEmployeeExtendedList;\n    };\n    var multiFacilityEmployeeList = \"multifacilityemployeelist\";\n\n    var getMultiFacilityEmployeeList = function () {\n        return multiFacilityEmployeeList;\n    };\n\n\n    //end of employee routes\n   \n   \n   \n\n\n    return {\n\n        /*start of other routes */\n\n        getNoPermission : getNoPermission,\n\n        /*end of other module routes */\n\n\n        //start of admin routes\n\n        getAgencyList: getAgencyList,\n        getAgency: getAgency,\n        getDepartmentList: getDepartmentList,\n        getDepartment: getDepartment,\n        getMedicalConditionList: getMedicalConditionList,\n        getMedicalCondition: getMedicalCondition,\n        getMedicalConditionTierList: getMedicalConditionTierList,\n        getMedicalConditionTier: getMedicalConditionTier,\n        getShelterTypeList: getShelterTypeList,\n        getShelterType: getShelterType,\n        getSheltreeEmployeeRatioList: getSheltreeEmployeeRatioList,\n        getSheltreeEmployeeRatio: getSheltreeEmployeeRatio,\n        getStaffSpecialtyList: getStaffSpecialtyList,\n        getStaffSpecialty: getStaffSpecialty,\n        getStaffTypeList: getStaffTypeList,\n        getStaffType: getStaffType,\n        getTransportTypeList: getTransportTypeList,\n        getTransportType: getTransportType,\n        getDispositionList: getDispositionList,\n        getDisposition: getDisposition,\n        getequipmentSupplyList: getequipmentSupplyList,\n        getequipmentSupply: getequipmentSupply,\n        getshelterIdentification: getshelterIdentification,\n        getshelterIdentificationList:getshelterIdentificationList,\n\n        //end of admin routes\n\n\n        //start of shelter routes\n\n        getShelterStatus:getShelterStatus,\n\n        //end of shelter routes\n\n\n        //start of employee routes\n\n        getEmployeeList: getEmployeeList,\n        getEmployeeExtendedList:getEmployeeExtendedList,\n        getEmployee: getEmployee,\n        getBulkUpdateEmployee: getBulkUpdateEmployee,\n        getBulkUpdateEmployeeExtended:getBulkUpdateEmployeeExtended,\n        getDownloadEmployee:getDownloadEmployee,\n        getUploadEmployee:getUploadEmployee,\n        getEmployeeAttendance: getEmployeeAttendance,\n        getBulkUpdateEmployeeAttendance: getBulkUpdateEmployeeAttendance,\n        getMultiFacilityEmployeeAttendance: getMultiFacilityEmployeeAttendance,\n        getMultiFacilityEmployeeExtendedList: getMultiFacilityEmployeeExtendedList,\n        getMultiFacilityEmployeeList: getMultiFacilityEmployeeList\n\n        //end of employee routes\n\n    };\n} ();","//Message types, Acknowledge Types and response message validation\n$ct.mt = function () {\n\n\n    // This object corresponds to AcknowledgeTypeEnum enum in service layer\n    var acknowledgeType = {\n        success: \"success\",\n        failure: \"failure\"\n    }\n\n\n    var getAcknowledgeTypeSuccess = function () {\n        return acknowledgeType.success;\n    };\n\n    var getAcknowledgeTypeFailure = function () {\n        return acknowledgeType.failure;\n    };\n\n    var isError = function (response) {\n\n        var error = false;\n\n        if (getAcknowledgeTypeSuccess() !== $ct.helpers.toLower(response.AcknowledgeType)) {\n\n            if ((response.MessageType !== undefined) && (response.MessageType !== null)) {\n                if (messageTypes.error == $ct.helpers.toLower(response.MessageType) || messageTypes.warning == $ct.helpers.toLower(response.MessageType) || messageTypes.information == $ct.helpers.toLower(response.MessageType) || messageTypes.info == $ct.helpers.toLower(response.MessageType) || messageTypes.message == $ct.helpers.toLower(response.MessageType) || messageTypes.exportToExcel == $ct.helpers.toLower(response.MessageType) || messageTypes.businessRuleValidation == $ct.helpers.toLower(response.MessageType)) {\n                    error = true;\n                }\n            }\n            else {\n                error = true;\n            }\n        }\n\n        return error;\n\n    };\n\n    var getErrorObject = function (response) {\n\n        if (isError(response)) {\n\n            var errorObject = {};\n\n            if ((response.MessageType !== undefined) && (response.MessageType !== null)) {\n                errorObject.messageType = response.MessageType;\n            }\n            else {\n                errorObject.messageType = messageTypes.error;\n            }\n\n            if ((response.MessageType !== undefined) && (response.MessageType !== null)) {\n                errorObject.message = response.Message;\n            }\n            else {\n                errorObject.message = \"Error please contact administrator\";\n            }\n\n            return errorObject;\n        }\n\n        return null;\n\n    };\n\n\n\n    // This object corresponds to MessageTypeEnum enum in service layer\n    var messageTypes = {\n\n        //Download is removed\n        success: \"success\",\n        error: \"error\",\n        warning: \"warning\",\n        information: \"information\",\n        info: \"info\",\n        message: \"message\",\n        versionConflict: \"versionconflict\",\n        noDataFound: \"nodatafound\",\n        noActiveEvent: \"noactiveevent\",\n        exportToExcel: \"exporttoexcel\" ,\n        businessRuleValidation: \"businessrulevalidation\"\n    };\n\n    var getSuccess = function () {\n        return messageTypes.success;\n    };\n\n    var getError = function () {\n        return messageTypes.error;\n    };\n\n    var getWarning = function () {\n        return messageTypes.warning;\n    };\n\n    var getInformation = function () {\n        return messageTypes.information;\n    };\n\n    var getInfo = function () {\n        return messageTypes.info;\n    };\n\n    var getMessage = function () {\n        return messageTypes.message;\n    };\n\n    var getVersionConflict = function () {\n        return messageTypes.versionConflict;\n    };\n\n    var getNoDataFound = function () {\n        return messageTypes.noDataFound;\n    };\n\n    var isVersionConflict = function (response) {\n\n        if ((response.MessageType !== undefined) && (response.MessageType !== null)) {\n            if (messageTypes.versionConflict === $ct.helpers.toLower(response.MessageType)) {\n                return true;\n            }\n        }\n        return false;\n\n    };\n\n    var isNoDataFound = function (response) {\n\n        if ((response.MessageType !== undefined) && (response.MessageType !== null)) {\n            if (messageTypes.noDataFound === $ct.helpers.toLower(response.MessageType)) {\n                return true;\n            }\n        }\n        return false;\n\n    };\n\n\n    var isBusinessRule = function (response) {\n\n        if ((response.MessageType !== undefined) && (response.MessageType !== null)) {\n            if (messageTypes.businessRuleValidation === $ct.helpers.toLower(response.MessageType)) {\n                return true;\n            }\n        }\n        return false;\n\n    };\n\n\n    var isNoActiveEvent = function (response) {\n\n        if ((response.MessageType !== undefined) && (response.MessageType !== null)) {\n            if (messageTypes.noActiveEvent === $ct.helpers.toLower(response.MessageType)) {\n                return true;\n            }\n        }\n        return false;\n\n    };\n\n\n    return {\n\n        //Acknowledge types\n        getAcknowledgeTypeSuccess: getAcknowledgeTypeSuccess,\n        getAcknowledgeTypeFailure: getAcknowledgeTypeFailure,\n\n        //Message types\n        getSuccess: getSuccess,\n        getError: getError,\n        getWarning: getWarning,\n        getInformation: getInformation,\n        getInfo: getInfo,\n        getMessage: getMessage,\n        getVersionConflict: getVersionConflict,\n        getNoDataFound: getNoDataFound,\n\n        //Message type validations\n        isVersionConflict: isVersionConflict,\n        isNoDataFound: isNoDataFound,\n        isBusinessRule : isBusinessRule,\n        isNoActiveEvent: isNoActiveEvent,\n\n        isError : isError,\n        getErrorObject: getErrorObject\n\n    };\n} ();","//styles\n$ct.styles = function () {\n\n    var validDataBorder = \"1px solid #00ff00\";\n\n    var getValidDataBorder = function () {\n        return validDataBorder;\n    };\n\n\n    var invalidDataBorder = \"1px solid #ff0000\";\n\n    var getInvalidDataBorder = function () {\n        return invalidDataBorder;\n    };\n\n\n    var noneStyle = \"none\";\n\n    var getNoneStyle = function () {\n        return noneStyle;\n    };\n\n\n    var blockStyle = \"block\";\n\n    var getBlockStyle = function () {\n        return blockStyle;\n    };\n\n    var inlineBlockStyle = \"inline-block\";\n\n    var getInlineBlockStyle = function () {\n        return inlineBlockStyle;\n    };\n\n    var removeInvalidDataBorder = \"\";\n\n    var getRemoveInvalidDataBorder = function () {\n        return removeInvalidDataBorder;\n    };\n\n\n    var displayInlineBlockClass = \"displayInlineBlock\";\n\n    var getDisplayInlineBlockClass = function () {\n        return displayInlineBlockClass;\n    };\n\n    var displayNoneImportantClass = \"displayNoneImportant\";\n\n    var getDisplayNoneImportantClass = function () {\n        return displayNoneImportantClass;\n    };\n\n\n\n    var dataInvalidClass = \"datainvalidcolor\";\n\n    var getDataInvalidClass = function () {\n        return dataInvalidClass;\n    };\n\n\n    var noClass = \"\";\n\n    var getNoClass = function () {\n        return noClass;\n    };\n\n\n    //staus update classes\n\n    var redBorderStatusUpdate = \"redBrdr\";\n\n    var getRedBorderStatusUpdate = function () {\n        return redBorderStatusUpdate;\n    };\n\n    var greyBorderStatusUpdate = \"greyBrdr\";\n\n    var getGreyBorderStatusUpdate = function () {\n        return greyBorderStatusUpdate;\n    };\n\n    var redBorderClass = \"redBorder\";\n\n    var getRedBorderClass = function () {\n        return redBorderClass;\n    };\n\n    var greenBorderClass = \"greenBorder\";\n\n    var getGreenBorderClass = function () {\n        return greenBorderClass;\n    };\n\n    var grayBorderClass = \"greyBorder\";\n\n    var getGrayBorderClass = function () {\n        return grayBorderClass;\n    };\n\n    var okCircleClass = \"icon-ok-circle\";\n\n    var getOkCircleClass = function () {\n        return okCircleClass;\n    };\n\n\n    var attentionClass = \"icon-attention\";\n\n    var getAttentionClass = function () {\n        return attentionClass;\n    };\n\n    var emptyIconClass = \"icon-right-dir\";\n\n    var getEmptyIconClass = function () {\n        return emptyIconClass;\n    };\n\n    //staus update classes end\n\n    //message header classes\n\n    var redBackgroundClass = \"imp-message_red\";\n\n    var getRedBackgroundClass = function () {\n        return redBackgroundClass;\n    };\n\n    var grayBackgroundClass = \"imp-message_grey\";\n\n    var getGrayBackgroundClass = function () {\n        return grayBackgroundClass;\n    };\n\n    var greenBackgroundClass = \"imp-message_green\";\n\n    var getGreenBackgroundClass = function () {\n        return greenBackgroundClass;\n    };\n\n\n    var redMessageIconClass = \"imp-message-icon_red\";\n\n    var getRedMessageIconClass = function () {\n        return redMessageIconClass;\n    };\n\n\n    var grayMessageIconClass = \"imp-message-icon_grey\";\n\n    var getGrayMessageIconClass = function () {\n        return grayMessageIconClass;\n    };\n\n\n    var greenMessageIconClass = \"imp-message-icon_green\";\n\n    var getGreenMessageIconClass = function () {\n        return greenMessageIconClass;\n    };\n\n    //message header classes end\n\n\n    return {\n\n        getValidDataBorder: getValidDataBorder,\n        getInvalidDataBorder: getInvalidDataBorder,\n\n        getNoneStyle: getNoneStyle,\n        getBlockStyle: getBlockStyle,\n        getInlineBlockStyle: getInlineBlockStyle,\n\n        getDisplayInlineBlockClass: getDisplayInlineBlockClass, \n        getDisplayNoneImportantClass : getDisplayNoneImportantClass,\n\n        getRemoveInvalidDataBorder: getRemoveInvalidDataBorder,\n        getDataInvalidClass: getDataInvalidClass,\n        getNoClass: getNoClass,\n\n        //staus update classes\n        getRedBorderStatusUpdate: getRedBorderStatusUpdate,\n        getGreyBorderStatusUpdate: getGreyBorderStatusUpdate,\n        getRedBorderClass: getRedBorderClass,\n        getGreenBorderClass: getGreenBorderClass,\n        getGrayBorderClass: getGrayBorderClass,\n        getOkCircleClass: getOkCircleClass,\n        getAttentionClass: getAttentionClass,\n        getEmptyIconClass: getEmptyIconClass,\n\n\n        //message header classes\n        getRedBackgroundClass: getRedBackgroundClass,\n        getGrayBackgroundClass: getGrayBackgroundClass,\n        getGreenBackgroundClass: getGreenBackgroundClass,\n        getRedMessageIconClass: getRedMessageIconClass,\n        getGrayMessageIconClass: getGrayMessageIconClass,\n        getGreenMessageIconClass: getGreenMessageIconClass\n\n    };\n} ();","\n//Messages\n$ct.msg = function () {\n\n    //Common messages\n\n    var genericErrorMsg = 'An unknown error occured while processing your request. Please contact administrator.';\n    var getGenericErrorMsg = function () {\n        return genericErrorMsg;\n    };\n\n    var invalidServiceRequestObject = \"Please configure ServiceRequest object properly.\"\n    var getInvalidServiceRequestObject = function () {\n        return invalidServiceRequestObject;\n    };\n\n    var invalidRequestMsg = \"Invalid Request\";\n    var getinvalidRequestMsg = function () {\n        return invalidRequestMsg;\n    };\n\n    var invalidResponseForRequestMsg = \"Invalid response for request\";\n    var getInvalidResponseForRequestMsg = function () {\n        return invalidResponseForRequestMsg;\n    };\n\n    var invalidResponseMsg = \" Invalid Response \";\n    var getInvalidResponseMsg = function () {\n        return invalidResponseMsg;\n    };\n\n    var versionConflictReloadMsg = \"Version conflict occured do you want to refresh data ?\";\n    var getVersionConflictReloadMsg = function () {\n        return versionConflictReloadMsg;\n    };\n\n    var deleteConfirmationMsg = \"Are you sure you want to delete? \";\n    var getDeleteConfirmationMsg = function () {\n        return deleteConfirmationMsg;\n    };\n\n    var validationMsg = \"Please fill required data \";\n    var getValidationMsg = function () {\n        return validationMsg;\n    };\n\n    var successMsg = \" saved successfully\";\n    var getSuccessMsg = function () {\n        return successMsg;\n    };\n\n    var deleteSuccessMsg = \" deleted successfully\";\n    var getDeleteSuccessMsg = function () {\n        return deleteSuccessMsg;\n    };\n\n\n    var employeeUploadError = \"Invalid Data\";\n    var getEmployeeUploadError = function () {\n        return employeeUploadError;\n    };\n\n\n\n    //Form specific messages\n\n\n\n\n    var agencySuccessMsg = \"Agency \" + successMsg;\n    var getAgencySuccessMsg = function () {\n        return agencySuccessMsg;\n    };\n\n    var shelterTypeSuccessMsg = \"ShelterType \" + successMsg;\n    var getShelterTypeSuccessMsg = function () {\n        return shelterTypeSuccessMsg;\n    };\n\n    var medicalConditionTierSuccessMsg = \"MedicalConditionTier\" + successMsg;\n    var getMedicalConditionTierSuccessMsg = function () {\n        return medicalConditionTierSuccessMsg\n    };\n\n    var staffSpecialtySuccessMsg = \"StaffSpecialty \" + successMsg;\n    var getStaffSpecialtySuccessMsg = function () {\n        return staffSpecialtySuccessMsg;\n    };\n    var departmentSuccessMsg = \"Department \" + successMsg;\n    var getDepartmentSuccessMsg = function () {\n        return departmentSuccessMsg;\n    };\n    var medicalConditionSuccessMsg = \"Medical Condition \" + successMsg;\n    var getMedicalConditionSuccessMsg = function () {\n        return medicalConditionSuccessMsg;\n    };\n    var sheltereeEmployeeSuccessMsg = \"shelteree Employee \" + successMsg;\n    var getSheltereeEmployeeSuccessMsg = function () {\n        return sheltereeEmployeeSuccessMsg;\n    };\n    var staffTypeSuccessMsg = \"Staff Type \" + successMsg;\n    var getStaffTypeSuccessMsg = function () {\n        return staffTypeSuccessMsg;\n    };\n    var transportTypeSuccessMsg = \"Transportation Type\" + successMsg;\n    var getTransportTypeSuccessMsg = function () {\n        return transportTypeSuccessMsg;\n    };\n\n    var equipmentSupplySuccessMsg = \"Equipment Supply\" + successMsg;\n    var getEquipmentSupplySuccessMsg = function () {\n        return equipmentSupplySuccessMsg;\n    };\n\n\n\n\n    var agencyDeleteSuccessMsg = \"Agency \" + deleteSuccessMsg;\n    var getAgencyDeleteSuccessMsg = function () {\n        return agencyDeleteSuccessMsg;\n    };\n\n    var medicalConditionTierDeleteSuccessMsg = \"MedicalConditionTier\" + deleteSuccessMsg;\n    var getMedicalConditionTierDeleteSuccessMsg  = function () {\n        return medicalConditionTierDeleteSuccessMsg \n    };\n\n    var shelterTypeDeleteSuccessMsg = \"ShelterType \" + deleteSuccessMsg;\n    var getShelterTypeDeleteSuccessMsg = function () {\n        return shelterTypeDeleteSuccessMsg;\n    };\n\n    var staffSpecialtyDeleteSuccessMsg = \"StaffSpecialty \" + deleteSuccessMsg;\n    var getStaffSpecialtyDeleteSuccessMsg = function () {\n        return staffSpecialtyDeleteSuccessMsg;\n    };\n\n    var departmentDeleteSuccessMsg = \"Department \" + deleteSuccessMsg;\n    var getDepartmentDeleteSuccessMsg = function () {\n        return departmentDeleteSuccessMsg;\n    };\n    var medicalConditionDeleteSuccessMsg = \"Medical Condition \" + deleteSuccessMsg;\n    var getMedicalConditionDeleteSuccessMsg = function () {\n        return medicalConditionDeleteSuccessMsg;\n    };\n    var sheltereeEmployeeDeleteSuccessMsg = \"shelteree Employee \" + deleteSuccessMsg;\n    var getSheltereeEmployeeDeleteSuccessMsg = function () {\n        return sheltereeEmployeeDeleteSuccessMsg;\n    };\n    var staffTypeDeleteSuccessMsg = \"Staff Type \" + deleteSuccessMsg;\n    var getStaffTypeDeleteSuccessMsg = function () {\n        return staffTypeDeleteSuccessMsg;\n    };\n    var transportTypeDeleteSuccessMsg = \"Transportation Type \" + deleteSuccessMsg;\n    var getTransportTypeDeleteSuccessMsg = function () {\n        return transportTypeDeleteSuccessMsg;\n    };\n\n\n    var shelterIdentificationDeleteSuccessMsg = \"Shelter Identification \" + deleteSuccessMsg;\n    var getShelterIdentificationDeleteSuccessMsg = function () {\n        return shelterIdentificationDeleteSuccessMsg;\n    };\n   \n\n    var shelterIdentificationSuccessMsg = \"Shelter Identification \" + successMsg;\n    var getShelterIdentificationSuccessMsg = function () {\n        return shelterIdentificationSuccessMsg;\n    };\n\n    var uploadValidFile = \"Please select excel file(.xls,.xslx)\";\n    var getUploadValidFile = function () {\n        return uploadValidFile;\n    };\n    \n\n    var validateUploadEmployees = \"Please select Import Action\";\n    var getEmployeesUploadImportOption = function () {\n        return validateUploadEmployees;\n    };\n\n\n    // employee related messages\n\n    var EmployeeSuccessMsg = \"Employee\" + successMsg;\n    var getEmployeeSuccessMsg = function () {\n        return EmployeeSuccessMsg;\n    };\n\n\n    var employeeDeleteSuccessMsg = \"Employee \" + deleteSuccessMsg;\n    var getEmployeeDeleteSuccessMsg = function () {\n        return employeeDeleteSuccessMsg;\n    };\n\n    var employeeUploadSuccessMsg = \"Data \" + successMsg;\n    var getEmployeeUploadSuccessMsg = function () {\n        return employeeUploadSuccessMsg;\n    };\n\n\n    var employeeAttendenceUpdatedSuccessMsg = \"Employee Attendence\" + successMsg;\n    var getEmployeeAttendenceUpdatedSuccessMsg = function () {\n        return employeeAttendenceUpdatedSuccessMsg;\n    };\n\n    var dispositionDeleteSuccessMsg = \"Disposition \" + deleteSuccessMsg;\n    var getDispositionDeleteSuccessMsg = function () {\n        return dispositionDeleteSuccessMsg;\n    };\n\n    var dispositionSuccessMsg = \"Disposition \" + successMsg;\n    var getDispositionSuccessMsg = function () {\n        return dispositionSuccessMsg;\n    };\n\n\n    var equipmentSupplyDeleteSuccessMsg = \"EquipmentSupply \" + deleteSuccessMsg;\n    var getequipmentSupplyDeleteSuccessMsg = function () {\n        return equipmentSupplyDeleteSuccessMsg;\n    };\n\n    // shelterstatus related messages\n\n    var ShelterStatusSuccessMsg = \"ShelterStatus\" + successMsg;\n    var getShelterStatusSuccessMsg = function () {\n        return ShelterStatusSuccessMsg;\n    };\n\n\n\n    return {\n\n        //Common messages\n        getGenericErrorMsg: getGenericErrorMsg,\n        getInvalidServiceRequestObject: getInvalidServiceRequestObject,\n        getinvalidRequestMsg: getinvalidRequestMsg,\n        getInvalidResponseForRequestMsg: getInvalidResponseForRequestMsg,\n        getInvalidResponseMsg: getInvalidResponseMsg,\n        getVersionConflictReloadMsg: getVersionConflictReloadMsg,\n        getDeleteConfirmationMsg: getDeleteConfirmationMsg,\n        getValidationMsg: getValidationMsg,\n        getEmployeeUploadError:getEmployeeUploadError,\n    \n\n        //Form specific messages\n        \n        \n\n        //Admin related messages\n        getSuccessMsg: getSuccessMsg,\n        getAgencySuccessMsg: getAgencySuccessMsg,\n        getShelterTypeSuccessMsg: getShelterTypeSuccessMsg,\n        getMedicalConditionTierSuccessMsg: getMedicalConditionTierSuccessMsg,\n        getStaffSpecialtySuccessMsg: getStaffSpecialtySuccessMsg,\n        getDepartmentSuccessMsg: getDepartmentSuccessMsg,\n        getMedicalConditionSuccessMsg: getMedicalConditionSuccessMsg,\n        getSheltereeEmployeeSuccessMsg: getSheltereeEmployeeSuccessMsg,\n        getStaffTypeSuccessMsg:getStaffTypeSuccessMsg,\n        getTransportTypeSuccessMsg: getTransportTypeSuccessMsg,\n        getDispositionDeleteSuccessMsg: getDispositionDeleteSuccessMsg,\n        getDispositionSuccessMsg:getDispositionSuccessMsg,\n        getShelterIdentificationSuccessMsg:getShelterIdentificationSuccessMsg,\n        getShelterIdentificationDeleteSuccessMsg:getShelterIdentificationDeleteSuccessMsg,\n        getEquipmentSupplySuccessMsg:getEquipmentSupplySuccessMsg,\n\n\n\n        getDeleteSuccessMsg: getDeleteSuccessMsg,\n        getAgencyDeleteSuccessMsg: getAgencyDeleteSuccessMsg,\n        getShelterTypeDeleteSuccessMsg: getShelterTypeDeleteSuccessMsg,\n        getMedicalConditionTierDeleteSuccessMsg: getMedicalConditionTierDeleteSuccessMsg,\n        getStaffSpecialtyDeleteSuccessMsg: getStaffSpecialtyDeleteSuccessMsg,\n        getDepartmentDeleteSuccessMsg: getDepartmentDeleteSuccessMsg,\n        getMedicalConditionDeleteSuccessMsg: getMedicalConditionDeleteSuccessMsg,\n        getSheltereeEmployeeDeleteSuccessMsg: getSheltereeEmployeeDeleteSuccessMsg,\n        getStaffTypeDeleteSuccessMsg:getStaffTypeDeleteSuccessMsg,\n        getTransportTypeDeleteSuccessMsg: getTransportTypeDeleteSuccessMsg,\n        getequipmentSupplyDeleteSuccessMsg: getequipmentSupplyDeleteSuccessMsg,\n\n\n        getUploadValidFile: getUploadValidFile,\n        getEmployeesUploadImportOption: getEmployeesUploadImportOption,\n\n        // employee related messages\n\n        getEmployeeSuccessMsg: getEmployeeSuccessMsg,\n        getEmployeeDeleteSuccessMsg: getEmployeeDeleteSuccessMsg,\n        getEmployeeUploadSuccessMsg: getEmployeeUploadSuccessMsg,\n\n        // shelterstatus related messages\n\n        getShelterStatusSuccessMsg: getShelterStatusSuccessMsg,\n        getEmployeeAttendenceUpdatedSuccessMsg: getEmployeeAttendenceUpdatedSuccessMsg\n\n    };\n} ();\n\n\n//Help Titles\n$ct.ht = function () {\n\n    var help = \"Help\";\n\n    var getHelp = function () {\n        return help;\n    };\n\n    var operatingStatus = \"Operating Status\";\n\n    var getOperatingStatus = function () {\n        return operatingStatus;\n    };\n\n    return {\n\n        getHelp: getHelp\n       // getOperatingStatus: getOperatingStatus,\n\n    };\n\n} ();\n\n\n","\n//Most of the configuration constants for the application\n\n\n\n\n$ct.other = function () {\n\n    var employeeTemplateURL = globalEmployeeTemplateURL;\n\n    var getEmployeeTemplateURL = function () {\n        return employeeTemplateURL;\n    };\n\n\n\n    return {\n\n        getEmployeeTemplateURL: getEmployeeTemplateURL\n\n    };\n\n} ();\n\n\n\n// role id's for security\n$ct.roles = function () {\n\n    var administratorId = globalAdministratorId;\n\n    var getAdministratorId = function () {\n        return administratorId;\n    };\n\n    var associationId = globalAssociationId;\n\n    var getAssociationId = function () {\n        return associationId;\n    };\n\n    var callCenterId = globalCallCenterId;\n\n    var getCallCenterId = function () {\n        return callCenterId;\n    };\n\n    var drcId = globalDrcId;\n\n    var getDrcId = function () {\n        return drcId;\n    };\n\n    var dataCellId = globalDataCellId;\n\n    var getDataCellId = function () {\n        return dataCellId;\n    };\n\n    var facilityUpdateId = globalFacilityUpdateId;\n\n    var getFacilityUpdateId = function () {\n        return facilityUpdateId;\n    };\n\n    var facilityReadOnlyId = globalFacilityReadOnlyId;\n\n    var getFacilityReadOnlyId = function () {\n        return facilityReadOnlyId;\n    };\n\n    var superAdminId = globalSuperAdminId;\n\n    var getSuperAdminId = function () {\n        return superAdminId;\n    };\n\n\n    return {\n\n        getAdministratorId: getAdministratorId,\n        getAssociationId: getAssociationId,\n        getCallCenterId: getCallCenterId,\n        getDrcId: getDrcId,\n        getDataCellId: getDataCellId,\n        getFacilityUpdateId: getFacilityUpdateId,\n        getFacilityReadOnlyId: getFacilityReadOnlyId,\n        getSuperAdminId: getSuperAdminId\n\n    };\n\n} ();\n\n\n","\n\n$ct.helpers = function () {\n\n    var errorMsgShow = function (errorTemplate, viewModel) {\n        $('.msg-container').empty();\n\n        $($.trim(errorTemplate)).appendTo('.msg-container').each(function () {\n            $(this).closest('.msg-container').animate({\n                bottom: 0\n            }, 800);\n        });\n\n        var messageHeader = $('.msg-container');\n        kendo.bind(messageHeader, viewModel);\n    };\n\n    var sucessMsgShow = function (succTemplate, viewModel) {\n        $('.msg-container').empty();\n        $($.trim(succTemplate)).appendTo('.msg-container').each(function () {\n            $(this).closest('.msg-container').animate({\n                bottom: 0\n            }, 800);\n        }).delay(4000).queue(function () {\n            $(this).closest('.msg-container').animate({\n                bottom: -($('.msg-container').height() + 20)\n            }, function () {\n                $('.msg-container').empty();\n            });\n        });\n\n        var messageHeader = $('.msg-container');\n        kendo.bind(messageHeader, viewModel);\n    };\n\n    var hideErrorMsgWindow = function (errorTemplate, viewModel) {\n        $('.msg-container').empty();\n    };\n\n\n    var displayPageBusyCursor = function (msg) {\n        $('#pageleveloverlay').show();\n    };\n\n    var hidePageBusyCursor = function (msg) {\n        $('#pageleveloverlay').hide();\n    };\n\n\n    var displayWorkAreaBusyCursor = function (msg) {\n        $('#workareaoverlay').show();\n    };\n\n    var hideWorkAreaBusyCursor = function (msg) {\n        //To wait before hiding busy cursor.\n        $('#workareaoverlay').hide();\n    };\n\n\n    var clearValidations = function (viewId) {\n        viewId = \"#\" + viewId;\n        $(viewId).find(\".k-invalid-msg\").hide();\n        var domElement = $(viewId).find(\".k-invalid\");\n        domElement.removeClass(\"k-invalid\");\n    };\n\n\n    var displayAlertWindow = function (msg) {\n        alert(msg);\n    };\n\n    var displayConfirmWindow = function (msg) {\n        if (confirm(msg)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n\n    var displayWindow = function (template, windowTitle, viewModel) {\n        var WindowElement = $(\"#commonWindow\");\n        WindowElement.html(\"\");\n        WindowElement.append(template.getJQueryElement());\n\n        if (viewModel === undefined) {\n            kendo.bind(WindowElement, kendo.observable({}));\n        }\n        else {\n            kendo.bind(WindowElement, viewModel);\n            if (viewModel.initialize !== undefined) {\n                viewModel.initialize();\n            }\n        }\n\n        WindowElement.show();\n\n        var window = WindowElement.data(\"kendoWindow\");\n\n        if (windowTitle !== undefined) {\n            window.title(windowTitle);\n        }\n\n        window.center().open();\n    };\n\n\n    var toLower = function (data) {\n        return data.toLowerCase();\n    };\n\n    var toUpper = function (data) {\n        return data.toUpperCase();\n    };\n\n    var executeFunctionByName = function (functionName, context, args) {\n        args = Array.prototype.slice.call(arguments).splice(2);\n        var namespaces = functionName.split(\".\");\n        var func = namespaces.pop();\n        for (var i = 0; i < namespaces.length; i++) {\n            context = context[namespaces[i]];\n        }\n        return context[func].apply(this, args);\n    };\n\n    var getDateFromEpochDate = function (epochDate) {\n        if (parseInt(epochDate))\n            return new Date(epochDate * 1000);\n    };\n\n    var getTodaysDateWithMaxTime = function () {\n        var todayDate = new Date();\n        return new Date(todayDate.getFullYear(), todayDate.getMonth(), todayDate.getDate(), 23, 59, 0, 0);\n    };\n\n\n    var getCurrentTimeStamp = function () {\n        var todayDate = new Date();\n\n        return todayDate.getMonth() + 1 + \"/\" + todayDate.getDate() + \"/\" + todayDate.getFullYear() + \" \" + todayDate.getHours() + \":\" + todayDate.getMinutes() + \":\" + todayDate.getSeconds();\n    };\n\n    return {\n        toLower                  : toLower,\n        toUpper                  : toUpper,\n        executeFunctionByName    : executeFunctionByName,\n        getDateFromEpochDate     : getDateFromEpochDate,\n        getTodaysDateWithMaxTime : getTodaysDateWithMaxTime,\n        getCurrentTimeStamp      : getCurrentTimeStamp,\n\n        displayAlertWindow       : displayAlertWindow,\n        displayConfirmWindow     : displayConfirmWindow,\n        displayWindow            : displayWindow,\n\n        errorMsgShow             : errorMsgShow,\n        sucessMsgShow            : sucessMsgShow,\n        hideErrorMsgWindow       : hideErrorMsgWindow,\n\n        displayPageBusyCursor    : displayPageBusyCursor,\n        hidePageBusyCursor       : hidePageBusyCursor,\n        displayWorkAreaBusyCursor: displayWorkAreaBusyCursor,\n        hideWorkAreaBusyCursor   : hideWorkAreaBusyCursor,\n        clearValidations         : clearValidations\n    };\n} ();\n","\n$ct.security = function () {\n\n\n    var authenticationFailedAction = function () {\n\n        var event = jQuery.Event($ct.en.getGoToNoPermissionPage());\n        $(document).trigger(event);\n\n    };\n\n\n    var userIdentity = null;\n\n    var setUserIdentity = function (userIdentityObj) {\n        userIdentity = userIdentityObj;\n    };\n\n\n    var isValidRole = function () {\n\n        if (userIdentity == null || userIdentity == undefined) {\n            authenticationFailedAction();\n        }\n\n        validRole = false;\n        $.each(userIdentity.Roles, function (index, record) {\n\n            if (\n            (record.Key == $ct.roles.getAdministratorId()) ||\n\n            (record.Key == $ct.roles.getAssociationId()) ||\n\n            (record.Key == $ct.roles.getCallCenterId()) ||\n\n            (record.Key == $ct.roles.getDrcId()) ||\n\n            (record.Key == $ct.roles.getDataCellId()) ||\n\n            (record.Key == $ct.roles.getFacilityUpdateId()) ||\n\n            (record.Key == $ct.roles.getFacilityReadOnlyId()) ||\n\n            (record.Key == $ct.roles.getSuperAdminId())\n\n            ) {\n                validRole = true;\n            }\n\n        });\n\n        return validRole;\n\n    };\n\n\n    var setRoles = function () {\n\n        if (userIdentity == null || userIdentity == undefined) {\n            authenticationFailedAction();\n        }\n\n        $.each(userIdentity.Roles, function (index, record) {\n\n            if (record.Key == $ct.roles.getAdministratorId())\n                isAdmin = true;\n\n            if (record.Key == $ct.roles.getAssociationId())\n                isAssociation = true;\n\n            if (record.Key == $ct.roles.getCallCenterId())\n                isCallCenter = true;\n\n            if (record.Key == $ct.roles.getDrcId())\n                isDrc = true;\n\n            if (record.Key == $ct.roles.getDataCellId())\n                isDataCell = true;\n\n            if (record.Key == $ct.roles.getFacilityUpdateId())\n                isFacilityUpdate = true;\n\n            if (record.Key == $ct.roles.getFacilityReadOnlyId())\n                isFacilityReadOnly = true;\n\n            if (record.Key == $ct.roles.getSuperAdminId())\n                isSuperAdmin = true;\n\n        });\n\n\n        //Setting highest role\n\n        if (isSuperAdmin) {\n\n            isAdmin = false;\n            isAssociation = false;\n            isCallCenter = false;\n            isDrc = false;\n            isDataCell = false;\n            isFacilityUpdate = false;\n            isFacilityReadOnly = false;\n\n        }\n\n        if (isAdmin) {\n            isAssociation = false;\n            isCallCenter = false;\n            isDrc = false;\n            isDataCell = false;\n            isFacilityUpdate = false;\n            isFacilityReadOnly = false;\n        }\n\n        if (isDataCell) {\n\n            isAssociation = false;\n            isCallCenter = false;\n            isDrc = false;\n            isFacilityUpdate = false;\n            isFacilityReadOnly = false;\n\n        }\n\n\n\n\n        if (isCallCenter) {\n\n            isAssociation = false;\n            isDrc = false;\n            isFacilityUpdate = false;\n            isFacilityReadOnly = false;\n\n        }\n\n\n        if (isAssociation) {\n\n            isDrc = false;\n            isFacilityUpdate = false;\n            isFacilityReadOnly = false;\n\n        }\n\n        if (isDrc) {\n\n            isFacilityUpdate = false;\n            isFacilityReadOnly = false;\n\n        }\n\n        if (isFacilityUpdate) {\n\n            isFacilityReadOnly = false;\n        \n        }\n\n\n    };\n\n\n\n    var isAdmin = false;\n\n    var isAdminRole = function () {\n        return isAdmin\n    };\n\n    var isAssociation = false;\n\n    var isAssociationRole = function () {\n        return isAssociation\n    };\n\n    var isCallCenter = false;\n\n    var isCallCenterRole = function () {\n        return isCallCenter\n    };\n\n    var isDrc = false;\n\n    var isDrcRole = function () {\n        return isDrc\n    };\n\n    var isDataCell = false;\n\n    var isDataCellRole = function () {\n        return isDataCell\n    };\n\n    var isFacilityUpdate = false;\n\n    var isFacilityUpdateRole = function () {\n        return isFacilityUpdate\n    };\n\n    var isFacilityReadOnly = false;\n\n    var isFacilityReadOnlyRole = function () {\n        return isFacilityReadOnly\n    };\n\n    var isSuperAdmin = false;\n\n    var isSuperAdminRole = function () {\n        return isSuperAdmin\n    };\n\n\n    var getUserName = function () {\n\n        if (userIdentity == null || userIdentity == undefined) {\n            authenticationFailedAction();\n        }\n\n        return userIdentity.UserFullName;\n\n    };\n\n    var isMultiFacilityUser = function () {\n\n        if (userIdentity == null || userIdentity == undefined) {\n            authenticationFailedAction();\n        }\n\n        if (userIdentity.IsMultiFacilityUser) {\n            return true;\n        }\n        else {\n            return false;\n        }\n\n    };\n\n\n\n    return {\n\n        authenticationFailedAction: authenticationFailedAction,\n        setUserIdentity: setUserIdentity,\n        isValidRole: isValidRole,\n        getUserName: getUserName,\n        isMultiFacilityUser: isMultiFacilityUser,\n\n        setRoles: setRoles,\n\n        //calling setRoles function is prerequisite\n        isAdminRole: isAdminRole,\n        isAssociationRole: isAssociationRole,\n        isCallCenterRole: isCallCenterRole,\n        isDrcRole: isDrcRole,\n        isDataCellRole: isDataCellRole,\n        isFacilityUpdateRole: isFacilityUpdateRole,\n        isFacilityReadOnlyRole: isFacilityReadOnlyRole,\n        isSuperAdminRole: isSuperAdminRole\n\n    };\n} ();","\n$ct.employeeColumnLookup = function () {\n\n    var employeeColumnLookup = null;\n\n    var depatmentLookUp = [];\n    var agencyLookUp = [];\n    var staffSpecialtyLookUp = [];\n    var staffTypeLookUp = [];\n    var shiftLookUp = [];\n\n    var setEmployeeColumnLookupdata = function (employeeColumnLookupdata) {\n\n        employeeColumnLookup = employeeColumnLookupdata.EmployeeLookupData;\n\n      \n        $.each(employeeColumnLookup.AgencyDepartmentData, function (index, record) {\n\n            var departmentData = {};\n\n            if (record.Key != -1) {\n\n                departmentData.DepartmentName = record.Value;\n\n                depatmentLookUp.push(departmentData);\n            }\n            \n        });\n       \n        \n       \n        $.each(employeeColumnLookup.AgencyDepartmentData, function (index, record) {\n\n            var agencyData = {};\n            if (record.Key != -1) {\n              \n                agencyData.AgencyName = record.AgencyName;\n\n                agencyLookUp.push(agencyData);\n\n\n            }\n        });\n\n        \n        \n        $.each(employeeColumnLookup.StaffSpecialityData, function (index, record) {\n\n            var staffSpecialtyData = {};\n            if (record.Key != -1) {\n                staffSpecialtyData.StaffSpecialityName = record.Value;\n\n                staffSpecialtyLookUp.push(staffSpecialtyData);\n            }\n        });\n\n     \n       \n\n        $.each(employeeColumnLookup.StaffTypeData, function (index, record) {\n\n            var staffTypeData = {};\n\n            if (record.Key != -1) {\n\n                staffTypeData.StaffTypeName = record.Value;\n\n                staffTypeLookUp.push(staffTypeData);\n            }\n        });\n\n\n       \n\n        $.each(employeeColumnLookup.ShiftTimeData, function (index, record) {\n\n            var shiftData = {};\n\n            if (record.Key != -1) {\n\n                shiftData.ShiftTime = record.Value;\n                shiftLookUp.push(shiftData);\n            }\n\n        });\n       \n      \n    };\n\n    \n\n    var shelterColumnLookupdata = null;\n\n    var shelterNamesLookUp = [];\n\n    var setShelterColumnLookupdata = function (shelterColumnLookupdata) {\n       \n\n        shelterColumnLookupdata = shelterColumnLookupdata;\n\n        $.each(shelterColumnLookupdata, function (index, record) {\n\n            var shelterNamesData = {};\n\n            shelterNamesData.FacilityName = record.Name;\n\n            shelterNamesLookUp.push(shelterNamesData);\n        });\n\n\n    };\n\n    var getShelters = function () {\n      \n        return shelterNamesLookUp;\n\n    };\n\n\n    var getDepartments = function () {\n\n\n        return depatmentLookUp;\n\n    };\n\n    var getAgencies = function () {\n\n        var modifiedAgencyLookUp = [];\n\n        var unique = {};\n        $.each(agencyLookUp, function (index, record) {\n            if (!unique[record.AgencyName]) {\n                modifiedAgencyLookUp.push(record);\n                unique[record.AgencyName] = record;\n            }\n        });\n  \n        return modifiedAgencyLookUp;\n\n    };\n\n    var getStaffSpecialties = function () {\n\n        return staffSpecialtyLookUp;\n\n    };\n    var getStaffTypes= function () {\n\n        return staffTypeLookUp;\n\n    };\n\n    var getShifts = function () {\n\n        return shiftLookUp;\n\n    };\n\n\n    return {\n\n        setEmployeeColumnLookupdata: setEmployeeColumnLookupdata,\n        setShelterColumnLookupdata: setShelterColumnLookupdata,\n        getShelters:getShelters,\n        getDepartments: getDepartments,\n        getAgencies: getAgencies,\n        getStaffSpecialties: getStaffSpecialties,\n        getStaffTypes: getStaffTypes,\n        getShifts: getShifts\n\n      \n\n    };\n} ();","\n$(function () {\n    $.ajaxSetup({ cache: false });\n});\n\n$ct.ajax = function () {\n\n    var wrapRequest = function (requestData) {\n\n        var isValidRequest = true;\n\n        //extend is used to use different instance of service request in every ajax call\n        var svcReq = $.extend(true, {}, $ct.constants.getServiceRequest()); ;\n\n        if (svcReq !== undefined) {\n            if (svcReq.ClientTag === undefined || svcReq.ClientTag.length <= 0) {\n                isValidRequest = false;\n            } else {\n                svcReq.RequestId = Math.uuidCompact();\n                svcReq.Data = requestData;\n                svcReq.SessionToken = $ct.constants.getSessionToken();\n            }\n        } else {\n            isValidRequest = false;\n        }\n\n        if (!isValidRequest) {\n            $ct.helpers.displayAlertWindow($ct.msg.getInvalidServiceRequestObject());\n        } else {\n            return svcReq;\n        }\n    };\n\n    //error and success messages in response object needs be handled by client(caller of ajax function) \n    var unwrapResponse = function (response, requestData) {\n        var isValidRequest = true;\n        var errorMsg = $ct.msg.getGenericErrorMsg();\n        var request = $.parseJSON(requestData);\n\n        if (request !== undefined) {\n            if (response !== undefined) {\n                if (response.ResponseId === undefined || response.ResponseId.length <= 0 || response.ResponseId !== request.RequestId) {\n                    isValidRequest = false;\n                    errorMsg = $ct.msg.getInvalidResponseForRequestMsg();\n\n                } else if ($ct.mt.getAcknowledgeTypeSuccess() !== $ct.helpers.toLower(response.AcknowledgeType)) {\n                    var errorObj = $ct.mt.getErrorObject(response);\n                    if (errorObj != null) {\n\n                        var event = jQuery.Event($ct.en.getShowErrorMsgJS());\n                        event.errorObj = errorObj;\n                        $(document).trigger(event);\n                        $ct.helpers.hideWorkAreaBusyCursor();\n                        $ct.helpers.hidePageBusyCursor();\n                    }\n                }\n                else {\n\n                    $ct.constants.SessionToken = response.SessionToken;\n\n                }\n            } else {\n\n                isValidRequest = false;\n                errorMsg = $ct.msg.getInvalidResponseMsg();\n\n            }\n        } else {\n            isValidRequest = false;\n        }\n\n        if (!isValidRequest) {\n            $ct.helpers.displayAlertWindow(errorMsg);\n        } else {\n            return response.Data;\n        }\n    };\n\n    var ajaxRequest = function (url, requestData, httpVerb, callBack, errorCallBack, isSaveRequest, attempt, isWrapped) {\n        $.ajax(url, {\n            data: requestData,\n            type: httpVerb,\n            dataType: $ct.constants.getDataType(),\n            contentType: $ct.constants.getContentType(),\n            success: function (data) {\n                if (callBack != undefined) {\n                    var resp = null;\n\n                    var resp = unwrapResponse(data, requestData);\n\n                    if (isWrapped) {\n                        resp = data;\n                    }\n\n                    if (resp !== undefined)\n                    //Success callback\n                        callBack(resp);\n                    else {\n                        if ((errorCallBack !== undefined) && (errorCallBack !== null)) {\n\n                            errorCallBack();\n                        }\n                    }\n                }\n            },\n\n            error: function (xhr, status, err) {\n\n                if ((errorCallBack !== undefined) && (errorCallBack !== null)) {\n                    errorCallBack(xhr, status, err);\n                }\n\n                /*if (!isSaveRequest && attempt <= maxRequestAttempt) {\n                ajaxRequest(url, requestData, httpVerb, callBack, errorCallBack, isSaveRequest, attempt + 1);\n                } else {\n                if (errorCallBack !== undefined)\n                errorCallBack();\n                }*/\n            }\n        });\n    };\n\n    var ajaxGet = function (url, request, callback, errorCallBack) {\n        return ajaxRequest(url, request, $ct.constants.getGetHttpVerb(), callBack, errorCallBack, false, 1);\n    };\n\n    var ajaxPost = function (url, request, callBack, errorCallBack, isWrapped) {\n        var svcReq = wrapRequest(request);\n\n        if (svcReq !== undefined)\n            return ajaxRequest(url, JSON.stringify(svcReq), $ct.constants.getPostHttpVerb(), callBack, errorCallBack, false, 1, isWrapped);\n        //return ajaxRequest(url, kendo.stringify(svcReq), $cm.postHttpVerb, callBack, errorCallBack, false, 1);\n    };\n\n    var ajaxSave = function (url, request, callBack, errorCallBack) {\n        var svcReq = wrapRequest(request);\n\n        if (svcReq !== undefined)\n            return ajaxRequest(url, JSON.stringify(svcReq), $ct.constants.getPostHttpVerb(), callBack, errorCallBack, true, 1);\n        //return ajaxRequest(url, kendo.stringify(svcReq), $cm.postHttpVerb, callBack, errorCallBack, true, 1);\n    };\n\n    // Exposed objects and parameters\n    return {\n\n        ajaxGet: ajaxGet,\n        ajaxPost: ajaxPost,\n        ajaxSave: ajaxSave\n\n    };\n} ();\n","$ct.ds.common = function () {\n\n\n    var getUserIdentityData = function (successCallBack) {\n\n        var requestParam = {};\n\n\n        $ct.ajax.ajaxPost($ct.cn.getcommonServicesUrl() + 'GetUserIdentityData', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, function () {\n\n            $ct.security.authenticationFailedAction();\n\n        }, true)\n\n\n        return \"\";\n    };\n\n\n    return {\n\n        getUserIdentityData: getUserIdentityData\n\n    };\n\n} ();","$ct.ds.admin.agency = function () {\n\n    var getAgencies = function (ViewModel, successCallBack) {\n\n        var datasource = new kendo.data.DataSource({\n            transport: {\n                read: function (options) {\n                    var filter = null;\n                    if (options.data.filter !== undefined) {\n                        filter = options.data.filter;\n                    }\n                    var sort = null;\n                    if (options.data.sort !== undefined) {\n                        sort = options.data.sort;\n                    }\n                    var requestParam = {};\n                    requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n\n                    ViewModel.set(\"selectedId\", -1);\n\n                    $ct.ajax.ajaxPost($ct.cn.getAgencyUrl() + 'GetAgencies', requestParam, function (result) {\n                        if ($ct.mt.isNoDataFound(result)) {\n                            var currPageIndex = datasource.page();\n                            if (currPageIndex > 1)\n                                datasource.page(currPageIndex - 1);\n                        }\n                       \n                        options.success(result);\n\n                        if (successCallBack != null)\n                            successCallBack(result);\n                    }, null, true)\n                }\n            },\n            serverSorting: true,\n            serverPaging: true,\n            serverFiltering: true,\n            pageSize: 10,\n            schema: {\n                data: function (response) {\n                    return response.Data;\n                },\n                total: function (response) {\n\n                    if (response != null && response != undefined && response != \"\")\n                        return response.TotalRecords;\n                },\n                model: { // define the model of the data source. Required for validation and property types.\n                    fields: {\n                        DisplayOrder: { type: \"number\" }\n                    }\n                }\n            }\n        });\n\n        return datasource;\n\n\n    };\n\n    var deleteAgencyById = function (ViewModel, successCallBack) {\n        var requestParam = {};\n\n        requestParam.AgencyId = ViewModel.selectedId;\n        requestParam.AgencyVersion = ViewModel.selectedRecordVersion;\n\n        $ct.ajax.ajaxPost($ct.cn.getAgencyUrl() + 'DeleteAgency', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n\n\n    };\n\n    var getAgencyById = function (agencyId, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.AgencyId = agencyId;\n\n        $ct.ajax.ajaxPost($ct.cn.getAgencyUrl() + 'GetAgencyById', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    var saveAgency = function (saveAgencyData, successCallBack) {\n\n        $ct.ajax.ajaxPost($ct.cn.getAgencyUrl() + 'SaveAgency', saveAgencyData, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    return {\n        getAgencies: getAgencies,\n        deleteAgencyById: deleteAgencyById,\n        getAgencyById: getAgencyById,\n        saveAgency: saveAgency\n    };\n\n}();\n\n","$ct.ds.admin.department = function () {\n\n\n    var getDepartments = function (ViewModel, successCallBack) {\n\n        var datasource = new kendo.data.DataSource({\n            transport: {\n                read: function (options) {\n                    var filter = null;\n                    if (options.data.filter !== undefined) {\n                        filter = options.data.filter;\n                    }\n                    var sort = null;\n                    if (options.data.sort !== undefined) {\n                        sort = options.data.sort;\n                    }\n                    var requestParam = {};\n                    requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n\n                    ViewModel.set(\"selectedId\", -1);\n\n                    $ct.ajax.ajaxPost($ct.cn.getDepartmentServiceUrl() + 'GetDepartments', requestParam, function (result) {\n                        if ($ct.mt.isNoDataFound(result)) {\n                            var currPageIndex = datasource.page();\n                            if (currPageIndex > 1)\n                                datasource.page(currPageIndex - 1);\n                        }\n\n                        options.success(result);\n\n                        if (successCallBack != null)\n                            successCallBack(result);\n                    }, null, true)\n                }\n            },\n            serverSorting: true,\n            serverPaging: true,\n            serverFiltering: true,\n            pageSize: 10,\n            schema: {\n                data: function (response) {\n                    return response.Data;\n                },\n                total: function (response) {\n\n                    if (response != null && response != undefined && response != \"\")\n                        return response.TotalRecords;\n                },\n                model: { // define the model of the data source. Required for validation and property types.\n                    fields: {\n                        DisplayOrder: { type: \"number\" },\n                        HVAC: { type: \"boolean\" }\n                    }\n                }\n            }\n        });\n\n        //  datasource.fetch();\n        return datasource;\n\n\n    };\n\n    var deleteDepartmentById = function (ViewModel, successCallBack) {\n        var requestParam = {};\n\n        requestParam.DepartmentId = ViewModel.selectedId;\n        requestParam.DepartmentVersion = ViewModel.selectedRecordVersion;\n        //change url\n        $ct.ajax.ajaxPost($ct.cn.getDepartmentServiceUrl() + 'DeleteDepartment', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n\n\n    };\n\n    var getDepartmentById = function (departmentId, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.departmentId = departmentId;\n\n        $ct.ajax.ajaxPost($ct.cn.getDepartmentServiceUrl() + 'GetDepartmentById', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    var saveDepartment = function (departmentData, successCallBack) {\n\n        $ct.ajax.ajaxPost($ct.cn.getDepartmentServiceUrl() + 'SaveDepartment', departmentData, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n\n\n    return {\n        getDepartments: getDepartments,\n        deleteDepartmentById: deleteDepartmentById,\n        getDepartmentById: getDepartmentById,\n        saveDepartment: saveDepartment\n    };\n\n}();\n\n","$ct.ds.admin.medicalconditiontier = function () {\n\n    var getMedicalConditionTiers = function (ViewModel, successCallBack) {\n\n        var datasource = new kendo.data.DataSource({\n            transport: {\n                read: function (options) {\n                    var filter = null;\n                    if (options.data.filter !== undefined) {\n                        filter = options.data.filter;\n                    }\n                    var sort = null;\n                    if (options.data.sort !== undefined) {\n                        sort = options.data.sort;\n                    }\n                    var requestParam = {};\n                    requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n\n                    ViewModel.set(\"selectedId\", -1);\n\n                    $ct.ajax.ajaxPost($ct.cn.getMedicalConditionTierUrl() + 'GetMedicalConditionTiers', requestParam, function (result) {\n                        if ($ct.mt.isNoDataFound(result)) {\n                            var currPageIndex = datasource.page();\n                            if (currPageIndex > 1)\n                                datasource.page(currPageIndex - 1);\n                        }\n                       \n                        options.success(result);\n\n                        if (successCallBack != null)\n                            successCallBack(result);\n                    }, null, true)\n                }\n            },\n            serverSorting: true,\n            serverPaging: true,\n            serverFiltering: true,\n            pageSize: 10,\n            schema: {\n                data: function (response) {\n                    return response.Data;\n                },\n                total: function (response) {\n\n                    if (response != null && response != undefined && response != \"\")\n                        return response.TotalRecords;\n                },\n                model: { // define the model of the data source. Required for validation and property types.\n                    fields: {\n                        DisplayOrder: { type: \"number\" }\n                    }\n                }\n            }\n        });\n\n        return datasource;\n\n\n    };\n\n    var deleteMedicalConditionTierById = function (ViewModel, successCallBack) {\n        var requestParam = {};\n\n        requestParam.MedicalConditionTierId = ViewModel.selectedId;\n        requestParam.MedicalConditionTierVersion = ViewModel.selectedRecordVersion;\n\n        $ct.ajax.ajaxPost($ct.cn.getMedicalConditionTierUrl() + 'DeleteMedicalConditionTier', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n\n\n    };\n\n    var getMedicalConditionTierById = function (medicalConditionTierId, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.MedicalConditionTierId = medicalConditionTierId;\n\n        $ct.ajax.ajaxPost($ct.cn.getMedicalConditionTierUrl() + 'GetMedicalConditionTierById', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    var saveMedicalConditionTier = function (saveMedicalConditionTierData, successCallBack) {\n\n        $ct.ajax.ajaxPost($ct.cn.getMedicalConditionTierUrl() + 'SaveMedicalConditionTier', saveMedicalConditionTierData, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    return {\n        getMedicalConditionTiers: getMedicalConditionTiers,\n        deleteMedicalConditionTierById: deleteMedicalConditionTierById,\n        getMedicalConditionTierById: getMedicalConditionTierById,\n        saveMedicalConditionTier: saveMedicalConditionTier\n    };\n\n}();\n\n","$ct.ds.admin.sheltertype = function () {\n\n    var getShelterTypes = function (ViewModel, successCallBack) {\n        \n        var datasource = new kendo.data.DataSource({\n            transport: {\n                read: function (options) {\n                    var filter = null;\n                    if (options.data.filter !== undefined) {\n                        filter = options.data.filter;\n                    }\n                    var sort = null;\n                    if (options.data.sort !== undefined) {\n                        sort = options.data.sort;\n                    }\n                    var requestParam = {};\n                    requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n\n                    ViewModel.set(\"selectedId\", -1);\n\n                    $ct.ajax.ajaxPost($ct.cn.getShelterTypeUrl() + 'GetShelterTypes', requestParam, function (result) {\n                        if ($ct.mt.isNoDataFound(result)) {\n                            var currPageIndex = datasource.page();\n                            if (currPageIndex > 1)\n                                datasource.page(currPageIndex - 1);\n                        }\n                       \n                        options.success(result);\n\n                        if (successCallBack != null)\n                            successCallBack(result);\n                    }, null, true)\n                }\n            },\n            serverSorting: true,\n            serverPaging: true,\n            serverFiltering: true,\n            pageSize: 10,\n            schema: {\n                data: function (response) {\n                    return response.Data;\n                },\n                total: function (response) {\n\n                    if (response != null && response != undefined && response != \"\")\n                        return response.TotalRecords;\n                },\n                model: { // define the model of the data source. Required for validation and property types.\n                    fields: {\n                        DisplayOrder: { type: \"number\" }\n                    }\n                }\n            }\n        });\n\n        return datasource;\n\n\n    };\n\n    var deleteShelterTypeById = function (ViewModel, successCallBack) {\n        var requestParam = {};\n\n        requestParam.ShelterTypeId = ViewModel.selectedId;\n        requestParam.ShelterTypeVersion = ViewModel.selectedRecordVersion;\n\n        $ct.ajax.ajaxPost($ct.cn.getShelterTypeUrl() + 'DeleteShelterType', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n\n\n    };\n\n    var getShelterTypeById = function (shelterTypeId, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.ShelterTypeId = shelterTypeId;\n\n        $ct.ajax.ajaxPost($ct.cn.getShelterTypeUrl() + 'GetShelterTypeById', requestParam, function (result) {\n            \n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    var saveShelterType = function (saveShelterTypeData, successCallBack) {\n\n        $ct.ajax.ajaxPost($ct.cn.getShelterTypeUrl() + 'SaveShelterType', saveShelterTypeData, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    return {\n        getShelterTypes: getShelterTypes,\n        deleteShelterTypeById: deleteShelterTypeById,\n        getShelterTypeById: getShelterTypeById,\n        saveShelterType: saveShelterType\n    };\n\n}();\n\n","$ct.ds.admin.staffspecialty= function () {\n\n    var getStaffSpecialities = function (ViewModel, successCallBack) {\n        \n        var datasource = new kendo.data.DataSource({\n            transport: {\n                read: function (options) {\n                    var filter = null;\n                    if (options.data.filter !== undefined) {\n                        filter = options.data.filter;\n                    }\n                    var sort = null;\n                    if (options.data.sort !== undefined) {\n                        sort = options.data.sort;\n                    }\n                    var requestParam = {};\n                    requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n\n                    ViewModel.set(\"selectedId\", -1);\n\n                    $ct.ajax.ajaxPost($ct.cn.getStaffSpecialtyUrl() + 'GetStaffSpecialities', requestParam, function (result) {\n                        if ($ct.mt.isNoDataFound(result)) {\n                            var currPageIndex = datasource.page();\n                            if (currPageIndex > 1)\n                                datasource.page(currPageIndex - 1);\n                        }\n                       \n                        options.success(result);\n\n                        if (successCallBack != null)\n                            successCallBack(result);\n                    }, null, true)\n                }\n            },\n            serverSorting: true,\n            serverPaging: true,\n            serverFiltering: true,\n            pageSize: 10,\n            schema: {\n                data: function (response) {\n                    return response.Data;\n                },\n                total: function (response) {\n\n                    if (response != null && response != undefined && response != \"\")\n                        return response.TotalRecords;\n                },\n                model: { // define the model of the data source. Required for validation and property types.\n                    fields: {\n                        DisplayOrder: { type: \"number\" }\n                    }\n                }\n            }\n        });\n\n        return datasource;\n\n\n    };\n\n    var deleteStaffSpecialtyById = function (ViewModel, successCallBack) {\n        var requestParam = {};\n\n        requestParam.StaffSpecialityId = ViewModel.selectedId;\n        requestParam.StaffSpecialityVersion = ViewModel.selectedRecordVersion;\n\n        $ct.ajax.ajaxPost($ct.cn.getStaffSpecialtyUrl() + 'DeleteStaffSpeciality', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n\n\n    };\n\n    var getStaffSpecialtyById = function (staffSpecialtyId, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.StaffSpecialityId = staffSpecialtyId;\n\n        $ct.ajax.ajaxPost($ct.cn.getStaffSpecialtyUrl() + 'GetStaffSpecialityById', requestParam, function (result) {\n            \n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    var saveStaffSpecialty = function (saveStaffSpecialtyData, successCallBack) {\n\n        $ct.ajax.ajaxPost($ct.cn.getStaffSpecialtyUrl() + 'SaveStaffSpeciality', saveStaffSpecialtyData, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    return {\n        getStaffSpecialities: getStaffSpecialities,\n        deleteStaffSpecialtyById: deleteStaffSpecialtyById,\n        getStaffSpecialtyById: getStaffSpecialtyById,\n        saveStaffSpecialty: saveStaffSpecialty\n    };\n\n}();\n\n","$ct.ds.admin.transportationType = function () {\n\n\n    var getTransportationTypes = function (ViewModel, successCallBack) {\n        \n            var datasource = new kendo.data.DataSource({\n                transport: {\n                    read: function (options) {\n                        var filter = null;\n                        if (options.data.filter !== undefined) {\n                            filter = options.data.filter;\n                        }\n                        var sort = null;\n                        if (options.data.sort !== undefined) {\n                            sort = options.data.sort;\n                        }\n                        var requestParam = {};\n                        requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n\n                        ViewModel.set(\"selectedId\", -1);\n\n                        $ct.ajax.ajaxPost($ct.cn.getTransportationTypeServiceUrl() + 'GetTransportationTypes', requestParam, function (result) {\n                            if ($ct.mt.isNoDataFound(result)) {\n                                var currPageIndex = datasource.page();\n                                if (currPageIndex > 1)\n                                    datasource.page(currPageIndex - 1);\n                            }\n\n                            options.success(result);\n\n                            if (successCallBack != null)\n                                successCallBack(result);\n                        }, null, true)\n                    }\n                },\n                serverSorting: true,\n                serverPaging: true,\n                serverFiltering: true,\n                pageSize: 10,\n                schema: {\n                    data: function (response) {\n                        return response.Data;\n                    },\n                    total: function (response) {\n\n                        if (response != null && response != undefined && response != \"\")\n                            return response.TotalRecords;\n                    },\n                    model: { // define the model of the data source. Required for validation and property types.\n                        fields: {\n                            DisplayOrder: { type: \"number\" },\n                            HVAC: { type: \"boolean\" }\n                        }\n                    }\n                }\n            });\n\n            //  datasource.fetch();\n            return datasource;\n\n\n        };\n\n    var deleteTransportationTypeById = function (ViewModel, successCallBack) {\n            var requestParam = {};\n\n            requestParam.transportationtypeId = ViewModel.selectedId;\n            requestParam.transportationtypeVersion = ViewModel.selectedRecordVersion;\n            //change url\n            $ct.ajax.ajaxPost($ct.cn.getTransportationTypeServiceUrl() + 'DeleteTransportationType', requestParam, function (result) {\n\n                if (successCallBack != null)\n                    successCallBack(result);\n\n            }, null, true)\n\n\n            return \"\";\n\n\n        };\n\n    var getTransportationTypeById = function (transportationtypeId, successCallBack) {\n\n            var requestParam = {};\n\n            requestParam.transportationtypeId = transportationtypeId;\n            //change url\n            $ct.ajax.ajaxPost($ct.cn.getTransportationTypeServiceUrl() + 'GetTransportationTypeById', requestParam, function (result) {\n\n                if (successCallBack != null)\n                    successCallBack(result);\n\n            }, null, true)\n\n\n            return \"\";\n        };\n\n    var saveTransportationType = function (medicalConditionData, successCallBack) {\n            //change url\n        $ct.ajax.ajaxPost($ct.cn.getTransportationTypeServiceUrl() + 'SaveTransportationType', medicalConditionData, function (result) {\n\n                if (successCallBack != null)\n                    successCallBack(result);\n\n            }, null, true)\n\n\n            return \"\";\n        };\n\n\n\n        return {\n            getTransportationTypes: getTransportationTypes,\n            deleteTransportationTypeById: deleteTransportationTypeById,\n            getTransportationTypeById: getTransportationTypeById,\n            saveTransportationType: saveTransportationType\n        };\n\n    }();\n\n\n\n","$ct.ds.admin.medicalcondition = function () {\n   \n\n    var getMedicalconditions = function (ViewModel, successCallBack) {\n        \n        var datasource = new kendo.data.DataSource({\n            transport: {\n                read: function (options) {\n                    var filter = null;\n                    if (options.data.filter !== undefined) {\n                        filter = options.data.filter;\n                    }\n                    var sort = null;\n                    if (options.data.sort !== undefined) {\n                        sort = options.data.sort;\n                    }\n                    var requestParam = {};\n                    requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n\n                    ViewModel.set(\"selectedId\", -1);\n\n                    $ct.ajax.ajaxPost($ct.cn.getmedicalConditionServiceUrl() + 'GetMedicalConditions', requestParam, function (result) {\n                        if ($ct.mt.isNoDataFound(result)) {\n                            var currPageIndex = datasource.page();\n                            if (currPageIndex > 1)\n                                datasource.page(currPageIndex - 1);\n                        }\n\n                        options.success(result);\n\n                        if (successCallBack != null)\n                            successCallBack(result);\n                    }, null, true)\n                }\n            },\n            serverSorting: true,\n            serverPaging: true,\n            serverFiltering: true,\n            pageSize: 10,\n            schema: {\n                data: function (response) {\n                    return response.Data;\n                },\n                total: function (response) {\n\n                    if (response != null && response != undefined && response != \"\")\n                        return response.TotalRecords;\n                },\n                model: { // define the model of the data source. Required for validation and property types.\n                    fields: {\n                        DisplayOrder: { type: \"number\" },\n                        HVAC: { type: \"boolean\" }\n                    }\n                }\n            }\n        });\n\n        //  datasource.fetch();\n        return datasource;\n\n\n    };\n\n    var deletegetMedicalConditionById = function (ViewModel, successCallBack) {\n        var requestParam = {};\n\n        requestParam.MedicalConditionId = ViewModel.selectedId;\n        requestParam.MedicalConditionVersion = ViewModel.selectedRecordVersion;\n        //change url\n        $ct.ajax.ajaxPost($ct.cn.getmedicalConditionServiceUrl() + 'DeleteMedicalCondition', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n\n\n    };\n\n    var getMedicalConditionById = function (MedicalConditionId, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.MedicalConditionId = MedicalConditionId;\n        //change url\n        $ct.ajax.ajaxPost($ct.cn.getmedicalConditionServiceUrl() + 'GetMedicalConditionById', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    var saveMedicalCondition = function (medicalConditionData, successCallBack) {\n        //change url\n        $ct.ajax.ajaxPost($ct.cn.getmedicalConditionServiceUrl() + 'SaveMedicalCondition', medicalConditionData, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n\n\n    return {\n        getMedicalconditions: getMedicalconditions,\n        deletegetMedicalConditionById: deletegetMedicalConditionById,\n        getMedicalConditionById: getMedicalConditionById,\n        saveMedicalCondition: saveMedicalCondition\n    };\n\n}();\n\n\n","$ct.ds.admin.stafftype = function () {\n\n\n    var getStaffTypes = function (ViewModel, successCallBack) {\n       \n        var datasource = new kendo.data.DataSource({\n            transport: {\n                read: function (options) {\n                    var filter = null;\n                    if (options.data.filter !== undefined) {\n                        filter = options.data.filter;\n                    }\n                    var sort = null;\n                    if (options.data.sort !== undefined) {\n                        sort = options.data.sort;\n                    }\n                    var requestParam = {};\n                    requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n\n                    ViewModel.set(\"selectedId\", -1);\n\n                    $ct.ajax.ajaxPost($ct.cn.getStaffTypeServiceUrl() + 'GetStaffTypes', requestParam, function (result) {\n                        if ($ct.mt.isNoDataFound(result)) {\n                            var currPageIndex = datasource.page();\n                            if (currPageIndex > 1)\n                                datasource.page(currPageIndex - 1);\n                        }\n\n                        options.success(result);\n\n                        if (successCallBack != null)\n                            successCallBack(result);\n                    }, null, true)\n                }\n            },\n            serverSorting: true,\n            serverPaging: true,\n            serverFiltering: true,\n            pageSize: 10,\n            schema: {\n                data: function (response) {\n                    return response.Data;\n                },\n                total: function (response) {\n\n                    if (response != null && response != undefined && response != \"\")\n                        return response.TotalRecords;\n                },\n                model: { // define the model of the data source. Required for validation and property types.\n                    fields: {\n                        DisplayOrder: { type: \"number\" },\n                        HVAC: { type: \"boolean\" }\n                    }\n                }\n            }\n        });\n\n        //  datasource.fetch();\n        return datasource;\n\n\n    };\n\n    var deletegetStaffTypesById = function (ViewModel, successCallBack) {\n        var requestParam = {};\n\n        requestParam.StaffTypeId = ViewModel.selectedId;\n        requestParam.StaffTypeVersion = ViewModel.selectedRecordVersion;\n        //change url\n        $ct.ajax.ajaxPost($ct.cn.getStaffTypeServiceUrl() + 'DeleteStaffType', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n\n\n    };\n\n    var getStaffTypesById = function (staffTypeId, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.StaffTypeId = staffTypeId;\n        //change url\n        $ct.ajax.ajaxPost($ct.cn.getStaffTypeServiceUrl() + 'GetStaffTypeById', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    var saveStaffTypes = function (staffTypeData, successCallBack) {\n        //change url\n        $ct.ajax.ajaxPost($ct.cn.getStaffTypeServiceUrl() + 'SaveStaffType', staffTypeData, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n\n\n    return {\n        getStaffTypes: getStaffTypes,\n        deletegetStaffTypesById: deletegetStaffTypesById,\n        getStaffTypesById: getStaffTypesById,\n        saveStaffTypes: saveStaffTypes\n    };\n\n}();\n\n\n","$ct.ds.admin.sheltreeEmployeeRatio = function () {\n\n    var getSheltreeEmployeeRatio = function (ViewModel, successCallBack) {\n        \n        var datasource = new kendo.data.DataSource({\n            transport: {\n                read: function (options) {\n                    var filter = null;\n                    if (options.data.filter !== undefined) {\n                        filter = options.data.filter;\n                    }\n                    var sort = null;\n                    if (options.data.sort !== undefined) {\n                        sort = options.data.sort;\n                    }\n                    var requestParam = {};\n                    requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n\n                    ViewModel.set(\"selectedId\", -1);\n\n                    $ct.ajax.ajaxPost($ct.cn.getSheltreeEmployeeRatioUrl() + 'GetSheltreeEmployeeRatios', requestParam, function (result) {\n                        if ($ct.mt.isNoDataFound(result)) {\n                            var currPageIndex = datasource.page();\n                            if (currPageIndex > 1)\n                                datasource.page(currPageIndex - 1);\n                        }\n\n                        options.success(result);\n\n                        if (successCallBack != null)\n                            successCallBack(result);\n                    }, null, true)\n                }\n            },\n            serverSorting: true,\n            serverPaging: true,\n            serverFiltering: true,\n            pageSize: 10,\n            schema: {\n                data: function (response) {\n                    return response.Data;\n                },\n                total: function (response) {\n\n                    if (response != null && response != undefined && response != \"\")\n                        return response.TotalRecords;\n                },\n                model: { // define the model of the data source. Required for validation and property types.\n                    fields: {\n                        SheltreeCount: { type: \"number\" },\n                        EmployeeCount: { type: \"number\" },\n\n                    }\n                }\n            }\n        });\n\n        return datasource;\n\n\n    };\n\n    var deletesheltreeEmployeeRatioById = function (ViewModel, successCallBack) {\n        var requestParam = {};\n\n        requestParam.SheltreeEmployeeRatioId = ViewModel.selectedId;\n        requestParam.SheltreeEmployeeRatioVersion = ViewModel.selectedRecordVersion;\n\n        $ct.ajax.ajaxPost($ct.cn.getSheltreeEmployeeRatioUrl() + 'DeleteSheltreeEmployeeRatio', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n\n\n    };\n\n    var getsheltreeEmployeeRatioById = function (sheltreeEmployeeRatioId, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.SheltreeEmployeeRatioId = sheltreeEmployeeRatioId;\n\n        $ct.ajax.ajaxPost($ct.cn.getSheltreeEmployeeRatioUrl() + 'GetSheltreeEmployeeRatioById', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    var savesheltreeEmployeeRatio = function (saveAgencyData, successCallBack) {\n\n        $ct.ajax.ajaxPost($ct.cn.getSheltreeEmployeeRatioUrl() + 'SaveSheltreeEmployeeRatio', saveAgencyData, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    return {\n        getSheltreeEmployeeRatio: getSheltreeEmployeeRatio,\n        deletesheltreeEmployeeRatioById: deletesheltreeEmployeeRatioById,\n        getsheltreeEmployeeRatioById: getsheltreeEmployeeRatioById,\n        savesheltreeEmployeeRatio: savesheltreeEmployeeRatio\n    };\n\n}();","$ct.ds.admin.disposition = function () {\n\n    var getDispositions = function (ViewModel, successCallBack) {\n\n        var datasource = new kendo.data.DataSource({\n            transport: {\n                read: function (options) {\n                    var filter = null;\n                    if (options.data.filter !== undefined) {\n                        filter = options.data.filter;\n                    }\n                    var sort = null;\n                    if (options.data.sort !== undefined) {\n                        sort = options.data.sort;\n                    }\n                    var requestParam = {};\n                    requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n\n                    ViewModel.set(\"selectedId\", -1);\n\n                    $ct.ajax.ajaxPost($ct.cn.getDispositionUrl() + 'GetDispositions', requestParam, function (result) {\n                        if ($ct.mt.isNoDataFound(result)) {\n                            var currPageIndex = datasource.page();\n                            if (currPageIndex > 1)\n                                datasource.page(currPageIndex - 1);\n                        }\n\n                        options.success(result);\n\n                        if (successCallBack != null)\n                            successCallBack(result);\n                    }, null, true)\n                }\n            },\n            serverSorting: true,\n            serverPaging: true,\n            serverFiltering: true,\n            pageSize: 10,\n            schema: {\n                data: function (response) {\n                    return response.Data;\n                },\n                total: function (response) {\n\n                    if (response != null && response != undefined && response != \"\")\n                        return response.TotalRecords;\n                },\n                model: { // define the model of the data source. Required for validation and property types.\n                    fields: {\n                        DisplayOrder: { type: \"number\" }\n                    }\n                }\n            }\n        });\n\n        return datasource;\n\n\n    };\n\n    var deleteDispositionById = function (ViewModel, successCallBack) {\n        var requestParam = {};\n\n        requestParam.DispositionId = ViewModel.selectedId;\n        requestParam.DispositionVersion = ViewModel.selectedRecordVersion;\n\n        $ct.ajax.ajaxPost($ct.cn.getDispositionUrl() + 'DeleteDisposition', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n\n\n    };\n\n    var getDispositionById = function (dispositionId, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.DispositionId = dispositionId;\n\n        $ct.ajax.ajaxPost($ct.cn.getDispositionUrl() + 'GetDispositionById', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    var saveDisposition = function (saveDispositionData, successCallBack) {\n\n        $ct.ajax.ajaxPost($ct.cn.getDispositionUrl() + 'SaveDisposition', saveDispositionData, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    return {\n        getDispositions: getDispositions,\n        deleteDispositionById: deleteDispositionById,\n        getDispositionById: getDispositionById,\n        saveDisposition: saveDisposition\n    };\n\n}();\n\n","$ct.ds.admin.shelterIdentification = function () {\n\n    var getShelterIdentifications = function (ViewModel, successCallBack) {\n\n        var datasource = new kendo.data.DataSource({\n            transport: {\n                read: function (options) {\n                    var filter = null;\n                    if (options.data.filter !== undefined) {\n                        filter = options.data.filter;\n                    }\n                    var sort = null;\n                    if (options.data.sort !== undefined) {\n                        sort = options.data.sort;\n                    }\n                    var requestParam = {};\n                    requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n\n                    ViewModel.set(\"selectedId\", -1);\n\n                    $ct.ajax.ajaxPost($ct.cn.getShelterIdentificationUrl() + 'GetShelterIdentifications', requestParam, function (result) {\n                        if ($ct.mt.isNoDataFound(result)) {\n                            var currPageIndex = datasource.page();\n                            if (currPageIndex > 1)\n                                datasource.page(currPageIndex - 1);\n                        }\n\n                        options.success(result);\n\n                        if (successCallBack != null)\n                            successCallBack(result);\n                    }, null, true)\n                }\n            },\n            serverSorting: true,\n            serverPaging: true,\n            serverFiltering: true,\n            pageSize: 10,\n            schema: {\n                data: function (response) {\n                    return response.Data;\n                },\n                total: function (response) {\n\n                    if (response != null && response != undefined && response != \"\")\n                        return response.TotalRecords;\n                },\n                model: { // define the model of the data source. Required for validation and property types.\n                    fields: {\n                        DisplayOrder: { type: \"number\" }\n                    }\n                }\n            }\n        });\n\n        return datasource;\n\n\n    };\n\n    var deleteShelterIdentificationById = function (ViewModel, successCallBack) {\n        var requestParam = {};\n\n        requestParam.ShelterIdentificationId = ViewModel.selectedId;\n        requestParam.ShelterIdentificationVersion = ViewModel.selectedRecordVersion;\n\n        $ct.ajax.ajaxPost($ct.cn.getShelterIdentificationUrl() + 'DeleteShelterIdentification', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n\n\n    };\n\n    var getShelterIdentificationById = function (shelterIdentificationId, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.ShelterIdentificationId = shelterIdentificationId;\n\n        $ct.ajax.ajaxPost($ct.cn.getShelterIdentificationUrl() + 'GetShelterIdentificationById', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    var saveShelterIdentification = function (saveShelterIdentificationData, successCallBack) {\n\n        $ct.ajax.ajaxPost($ct.cn.getShelterIdentificationUrl() + 'SaveShelterIdentification', saveShelterIdentificationData, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    return {\n        getShelterIdentifications: getShelterIdentifications,\n        deleteShelterIdentificationById: deleteShelterIdentificationById,\n        getShelterIdentificationById: getShelterIdentificationById,\n        saveShelterIdentification: saveShelterIdentification\n    };\n\n}();\n\n","\n$ct.ds.admin.equipmentsupply = function () {\n\n    var getEquipmentSupplies = function (ViewModel, successCallBack) {\n\n        var datasource = new kendo.data.DataSource({\n            transport: {\n                read: function (options) {\n                    var filter = null;\n                    if (options.data.filter !== undefined) {\n                        filter = options.data.filter;\n                    }\n                    var sort = null;\n                    if (options.data.sort !== undefined) {\n                        sort = options.data.sort;\n                    }\n                    var requestParam = {};\n                    requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n\n                    ViewModel.set(\"selectedId\", -1);\n\n                    $ct.ajax.ajaxPost($ct.cn.getEquipmentSupplyUrl() + 'GetEquipmentSupplies', requestParam, function (result) {\n                        if ($ct.mt.isNoDataFound(result)) {\n                            var currPageIndex = datasource.page();\n                            if (currPageIndex > 1)\n                                datasource.page(currPageIndex - 1);\n                        }\n\n                        options.success(result);\n\n                        if (successCallBack != null)\n                            successCallBack(result);\n                    }, null, true)\n                }\n            },\n            serverSorting: true,\n            serverPaging: true,\n            serverFiltering: true,\n            pageSize: 10,\n            schema: {\n                data: function (response) {\n                    return response.Data;\n                },\n                total: function (response) {\n\n                    if (response != null && response != undefined && response != \"\")\n                        return response.TotalRecords;\n                },\n                model: { // define the model of the data source. Required for validation and property types.\n                    fields: {\n                        DisplayOrder: { type: \"number\" }\n                    }\n                }\n            }\n        });\n\n        return datasource;\n\n\n    };\n\n    var deleteEquipmentSupplyById = function (ViewModel, successCallBack) {\n        var requestParam = {};\n\n        requestParam.EquipmentSupplyId = ViewModel.selectedId;\n        requestParam.EquipmentSupplyVersion = ViewModel.selectedRecordVersion;\n\n        $ct.ajax.ajaxPost($ct.cn.getEquipmentSupplyUrl() + 'DeleteEquipmentSupply', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n\n\n    };\n\n    var getEquipmentSupplyById = function (equipmentSupplyId, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.EquipmentSupplyId = equipmentSupplyId;\n\n        $ct.ajax.ajaxPost($ct.cn.getEquipmentSupplyUrl() + 'GetEquipmentSupplyById', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    var saveEquipmentSupply = function (saveEquipmentSupplyData, successCallBack) {\n\n        $ct.ajax.ajaxPost($ct.cn.getEquipmentSupplyUrl() + 'SaveEquipmentSupply', saveEquipmentSupplyData, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    return {\n        getEquipmentSupplies: getEquipmentSupplies,\n        deleteEquipmentSupplyById: deleteEquipmentSupplyById,\n        getEquipmentSupplyById: getEquipmentSupplyById,\n        saveEquipmentSupply: saveEquipmentSupply\n    };\n\n}();\n\n","$ct.ds.shlt.shelter = function () {\n\n    var getShelters = function (successCallBack) {\n\n        var requestParam = \"\";\n        $ct.ajax.ajaxPost($ct.cn.getShelterUrl() + 'GetSheltersWithSecurity', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    var getSheltersWithDs = function (successCallBack) {\n\n        var datasource = new kendo.data.DataSource({\n            transport: {\n                read: function (options) {\n\n                    var requestParam = \"\";\n\n                    $ct.ajax.ajaxPost($ct.cn.getShelterUrl() + 'GetSheltersWithSecurity', requestParam, function (result) {\n                        \n                        var resultData = result.Data;\n                        if ((resultData !== undefined && resultData !== null && resultData.length > 0) && ($ct.security.isMultiFacilityUser())) {\n\n                            var selectItem = {};\n\n                            selectItem.Id = -1;\n                            selectItem.Name = \"--All--\";\n\n                            resultData.splice(0, 0, selectItem);\n\n                        }\n\n                        options.success(resultData);\n                        if (successCallBack != null)\n                            successCallBack(resultData);\n                    }, null, true)\n                }\n            }\n        });\n\n        return datasource;\n\n    };\n\n\n    var getShelterStatus = function (ViewModel, successCallBack) {\n\n        var datasource = new kendo.data.DataSource({\n            transport: {\n                read: function (options) {\n                    var filter = null;\n                    if (options.data.filter !== undefined) {\n                        filter = options.data.filter;\n                    }\n                    var sort = null;\n                    if (options.data.sort !== undefined) {\n                        sort = options.data.sort;\n                    }\n\n                    var requestParam = {};\n\n                    requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, Filter: filter, Sort: sort };\n\n                    $ct.ajax.ajaxPost($ct.cn.getShelterStatusUrl() + 'GetShelterStatusList', requestParam, function (result) {\n\n                        if ($ct.mt.isNoDataFound(result)) {\n                            var currPageIndex = datasource.page();\n                            if (currPageIndex > 1)\n                                datasource.page(currPageIndex - 1);\n                        }\n\n                        options.success(result);\n\n                        if (successCallBack != null)\n                            successCallBack(result);\n                    }, null, true)\n                }\n            },\n            serverSorting: true,\n            serverPaging: true,\n            serverFiltering: true,\n            pageSize: 10,\n            schema: {\n                data: function (response) {\n\n                    //Adding or formatting  open and closed date to data \n                    $.each(response.Data, function (index, record) {\n\n\n                        record.onchangeopencloseddate = function () {\n\n                            var opendate = kendo.parseDate(this.get(\"OpenDate\"), \"yyyy-MM-ddTHH:mm:s\");\n\n                            var closeddate = kendo.parseDate(this.get(\"ClosedDate\"), \"yyyy-MM-ddTHH:mm:s\");\n\n                            var currentdate = new Date();\n\n\n\n                            if ((opendate == \"\") || (opendate == null) || (opendate > currentdate)) {\n\n                                this.set(\"Status\", \"Not Assigned\");\n\n\n                            }\n\n                            else if ((opendate < currentdate) && (closeddate == null)) {\n                                this.set(\"Status\", \"Open\");\n\n                            }\n                            else if ((opendate < closeddate) && (closeddate < currentdate)) {\n                                this.set(\"Status\", \"Closed\");\n\n                            }\n                            else if (closeddate > currentdate) {\n                                this.set(\"Status\", \"Open\");\n\n                            }\n\n                            return true;\n                        };\n\n\n\n\n                        if (record.OpenDate === undefined) {\n                            record.OpenDate = null;\n                        }\n                        else {\n                            record.OpenDate = kendo.parseDate(record.OpenDate, \"yyyy-MM-ddTHH:mm:s\");\n                        }\n\n                        if (record.ClosedDate === undefined) {\n                            record.ClosedDate = null;\n                        }\n                        else {\n                            record.ClosedDate = kendo.parseDate(record.ClosedDate, \"yyyy-MM-ddTHH:mm:s\");\n                        }\n\n\n                        record.saveClicked = false;\n\n\n                        record.hideOpenDateValidation = function () {\n\n\n                            if (this.get(\"saveClicked\")) {\n                                var openDt = this.get(\"OpenDate\");\n\n                                if ((openDt == \"\") || (openDt == null)) {\n                                    return false;\n                                }\n                                else {\n                                    return true;\n                                }\n                            }\n                            else {\n                                return true;\n                            }\n\n                        };\n\n                        record.hideClosedDateValidation = function () {\n\n                            if (this.get(\"saveClicked\")) {\n                                var closedDt = this.get(\"ClosedDate\");\n\n                                if ((closedDt == \"\") || (closedDt == null)) {\n                                    return false;\n                                }\n                                else {\n                                    return true;\n                                }\n                            }\n                            else {\n                                return true;\n                            }\n\n                        };\n\n\n\n                        record.hideOpenClosedDateValidation = function () {\n\n                            if (this.get(\"saveClicked\")) {\n\n\n                                var openDt = this.get(\"OpenDate\");\n\n                                if ((openDt == \"\") || (openDt == null)) {\n                                    return true;\n                                }\n\n                                var closedDt = this.get(\"ClosedDate\");\n\n                                if ((closedDt == \"\") || (closedDt == null)) {\n                                    return true;\n                                }\n\n                                if (openDt < closedDt) {\n                                    return true;\n                                }\n                                else {\n                                    return false;\n                                }\n\n                            }\n                            else {\n                                return true;\n                            }\n\n                        }\n\n\n\n\n\n                    });\n\n                    return response.Data;\n                },\n                total: function (response) {\n\n                    if (response != null && response != undefined && response != \"\")\n                        return response.TotalRecords;\n                }\n            }\n        });\n\n        //  datasource.fetch();\n        return datasource;\n\n\n    };\n\n\n    var getEvents = function (successCallBack) {\n\n        var requestParam = \"\";\n        $ct.ajax.ajaxPost($ct.cn.getEventUrl() + 'GetEvents', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n\n    var saveShelterStatus = function (saveShelterStatusData, successCallBack) {\n\n        var requestParam = {};\n        requestParam.ShelterStatus = {}\n        requestParam.ShelterStatus.FacilityId = saveShelterStatusData.ShelterId;\n        requestParam.ShelterStatus.OpenDate = saveShelterStatusData.OpenDate;\n        requestParam.ShelterStatus.ClosedDate = saveShelterStatusData.ClosedDate;\n        requestParam.ShelterStatus.IsNew = saveShelterStatusData.IsNew;\n        requestParam.ShelterStatus.Version = saveShelterStatusData.Version;\n\n        $ct.ajax.ajaxPost($ct.cn.getShelterStatusUrl() + 'SaveShelterStatus', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n\n    var exportShelterStatusToExcel = function (ViewModel, successCallBack) {\n\n\n        var filter = null;\n        if (ViewModel.dsShelterStatus.filter() !== undefined) {\n            filter = ViewModel.dsShelterStatus.filter();\n        }\n        var sort = null;\n        if (ViewModel.dsShelterStatus.sort() !== undefined) {\n            sort = ViewModel.dsShelterStatus.sort();\n        }\n\n        var pageIndex = 1;\n        if (ViewModel.dsShelterStatus.page() !== undefined) {\n            pageIndex = ViewModel.dsShelterStatus.page();\n        }\n\n        var pageSize = 10;\n        if (ViewModel.dsShelterStatus.pageSize() !== undefined) {\n            pageSize = ViewModel.dsShelterStatus.pageSize();\n        }\n\n\n        var requestParam = {};\n        requestParam.Criteria = { PageSize: pageSize, PageIndex: pageIndex, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n\n\n\n        $ct.ajax.ajaxPost($ct.cn.getShelterStatusUrl() + 'ExportShelterStatusToExcel', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n        return \"\";\n    }\n\n\n\n    return {\n\n        getShelters: getShelters,\n        getSheltersWithDs: getSheltersWithDs,\n        getShelterStatus: getShelterStatus,\n        getEvents: getEvents,\n        saveShelterStatus: saveShelterStatus,\n        exportShelterStatusToExcel: exportShelterStatusToExcel\n    };\n\n}();","$ct.ds.emp.employee = function () {\n\n    var getImportActionOptions = function (successCallBack) {\n\n        var requestParam = \"\";\n        $ct.ajax.ajaxPost($ct.cn.getEmployeeUrl() + 'GetImportActionOptions', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n\n    var getExportFailedImportedEmployeeDataToExcel = function (viewModel, successCallBack) {\n        var requestParam = { \"FileContentId\": viewModel.FileContentId, \"FacilityId\": viewModel.FacilityId };\n        $ct.ajax.ajaxPost($ct.cn.getEmployeeUrl() + 'ExportFailedImportedEmployeeToExcel', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n        }, null, true)\n\n        return '';\n    }\n\n   \n\n    var getEmployees = function (ViewModel, successCallBack) {\n\n        var datasource = new kendo.data.DataSource({\n            transport: {\n                read: function (options) {\n                    var filter = null;\n                    if (options.data.filter !== undefined) {\n                        filter = options.data.filter;\n                    }\n                    var sort = null;\n                    if (options.data.sort !== undefined) {\n                        sort = options.data.sort;\n                    }\n                    var requestParam = {};\n                    requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n                    //TODO:\n                    requestParam.ShelterId = ViewModel.empHeaderData.shelter.Id;\n                  \n                    requestParam.SelectedEmployeeIds = ViewModel.get(\"empRequestData.SelectedEmployeeIds\");\n                    requestParam.UnSelectedEmployeeIds = ViewModel.get(\"empRequestData.UnSelectedEmployeeIds\");\n                    requestParam.ViewAll = ViewModel.empRequestData.ViewAll;\n                    requestParam.FetchSelectedOnly = ViewModel.empRequestData.FetchSelectedOnly;\n                   \n                    ViewModel.set(\"selectedId\", \"-1\");\n                    \n                    $ct.ajax.ajaxPost($ct.cn.getEmployeeUrl() + 'GetEmployees', requestParam, function (result) {\n\n                        if ($ct.mt.isNoDataFound(result)) {\n                            var currPageIndex = datasource.page();\n                            if (currPageIndex > 1)\n                                datasource.page(currPageIndex - 1);\n                        }\n\n                        options.success(result);\n\n                        if (successCallBack != null)\n                            successCallBack(result);\n                    }, null, true)\n                }\n            },\n            serverSorting: true,\n            serverPaging: true,\n            serverFiltering: true,\n            pageSize: 10,\n            schema: {\n                data: function (response) {\n                    return response.Data.Employees;\n                },\n                total: function (response) {\n\n                    if (response != null && response != undefined && response != \"\")\n                        return response.TotalRecords;\n                },\n                model: { // define the model of the data source. Required for validation and property types.\n                    fields: {\n                        IsMedical: { type: \"boolean\" }\n                    }\n                }\n            }\n        });\n\n        return datasource;\n\n\n    };\n\n    var getEmployeeExpandedList = function (ViewModel, successCallBack) {\n\n        var datasource = new kendo.data.DataSource({\n            transport: {\n                read: function (options) {\n                    var filter = null;\n                    if (options.data.filter !== undefined) {\n                        filter = options.data.filter;\n                    }\n                    var sort = null;\n                    if (options.data.sort !== undefined) {\n                        sort = options.data.sort;\n                    }\n                    var requestParam = {};\n                    requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n\n                    requestParam.ShelterId = ViewModel.empHeaderData.shelter.Id;\n                    \n                    requestParam.SelectedEmployeeIds = ViewModel.get(\"empRequestData.SelectedEmployeeIds\");\n                    requestParam.UnSelectedEmployeeIds = ViewModel.get(\"empRequestData.UnSelectedEmployeeIds\");\n                    requestParam.ViewAll = ViewModel.empRequestData.ViewAll;\n                    requestParam.FetchSelectedOnly = ViewModel.empRequestData.FetchSelectedOnly;\n\n                    ViewModel.set(\"selectedId\", $ct.constants.getemptyGUID());\n\n                    $ct.ajax.ajaxPost($ct.cn.getEmployeeUrl() + 'GetExpandedEmployees', requestParam, function (result) {\n\n                        if (result.Data.ExpandedEmployees.length === 0) {\n                            var currPageIndex = datasource.page();\n                            if (currPageIndex > 1)\n                                datasource.page(currPageIndex - 1);\n                        }\n                        options.success(result);\n                        if (successCallBack != null)\n                            successCallBack(result);\n                    }, null, true)\n\n                }\n            },\n            serverSorting: true,\n            serverPaging: true,\n            serverFiltering: true,\n            pageSize: 10,\n            schema: {\n                data: function (response) {\n                    //ViewModel.set(\"SelectedEmployeeIds\", response.Data.SelectedEmployeeIds);\n                    return response.Data.ExpandedEmployees;\n                },\n                total: function (response) {\n\n                    if (response != null && response != undefined && response != \"\")\n                        return response.TotalRecords;\n                },\n                model: { // define the model of the data source. Required for validation and property types.\n                    fields: {\n                        IsMedical: { type: \"boolean\" }\n                    }\n                }\n            }\n        });\n\n        return datasource;\n    };\n\n    var getEmployeeBulkUpdateLookup = function (ViewModel, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.SelectedEmployeeIds = ViewModel.get(\"empRequestData.SelectedEmployeeIds\");\n        requestParam.UnSelectedEmployeeIds = ViewModel.get(\"empRequestData.UnSelectedEmployeeIds\");\n        requestParam.ViewAll = ViewModel.empRequestData.ViewAll;\n        requestParam.FetchSelectedOnly = ViewModel.empRequestData.FetchSelectedOnly;\n\n        $ct.ajax.ajaxPost($ct.cn.getEmployeeUrl() + 'GetEmployeeBulKUpdateLookupData', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n        }, null, true)\n\n        return \"\";\n    };\n\n\n    var bulkUpdateEmployeeData = function (ViewModel, successCallBack) {\n\n        var requestParam = {};\n        var reqObj = ViewModel.saveRequest;\n\n        requestParam.ShelterId = ViewModel.shelterId;\n        // requestParam.SelectedPatientIds = ViewModel.SelectedPatientIds;\n\n        requestParam.SelectedStaffTypeId = reqObj.valStaffType;\n        requestParam.SelectedDepartmentId = reqObj.valDepartment;\n        requestParam.SelectedShiftId = reqObj.valShiftTime;\n        requestParam.SelectedStaffSpecialityId = reqObj.valStaffSpeciality;\n\n        $ct.ajax.ajaxPost($ct.cn.getEmployeeUrl() + 'BulkUpdateEmployeeData', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n\n\n\n\n\n    var deleteEmployeeById = function (selEmployeeId, selEmployeeVersion, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.Id = selEmployeeId;\n        requestParam.EmployeeVersion = selEmployeeVersion;\n        \n        $ct.ajax.ajaxPost($ct.cn.getEmployeeUrl() + 'DeleteEmployee', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n\n    };\n\n\n\n    var getEmployeeById = function (employeeId, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.EmployeeId = employeeId;\n\n        $ct.ajax.ajaxPost($ct.cn.getEmployeeUrl() + 'GetEmployeeById', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n\n    var saveEmployee = function (saveEmployeeData, successCallBack) {\n\n        $ct.ajax.ajaxPost($ct.cn.getEmployeeUrl() + 'SaveEmployee', saveEmployeeData, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n\n    var exportEmployeesListToExcel = function (ViewModel, successCallBack) {\n\n        var filter = null;\n        if (ViewModel.dsEmployeeList.filter() !== undefined) {\n            filter = ViewModel.dsEmployeeList.filter();\n        }\n        var sort = null;\n        if (ViewModel.dsEmployeeList.sort() !== undefined) {\n            sort = ViewModel.dsEmployeeList.sort();\n        }\n\n        var pageIndex = 1;\n        if (ViewModel.dsEmployeeList.page() !== undefined) {\n            pageIndex = ViewModel.dsEmployeeList.page();\n        }\n\n        var pageSize = 10;\n        if (ViewModel.dsEmployeeList.pageSize() !== undefined) {\n            pageSize = ViewModel.dsEmployeeList.pageSize();\n        }\n\n\n        var requestParam = {};\n        requestParam.Criteria = { PageSize: pageSize, PageIndex: pageIndex, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n\n        requestParam.ShelterId = ViewModel.empHeaderData.shelter.Id;\n      \n\n        //+Note Request Data Added\n        requestParam.SelectedEmployeeIds = ViewModel.get(\"empRequestData.SelectedEmployeeIds\");\n        requestParam.UnSelectedEmployeeIds = ViewModel.get(\"empRequestData.UnSelectedEmployeeIds\");\n        requestParam.ViewAll = ViewModel.empRequestData.ViewAll;\n        requestParam.FetchSelectedOnly = ViewModel.empRequestData.FetchSelectedOnly;\n\n        \n        $ct.ajax.ajaxPost($ct.cn.getEmployeeUrl() + 'ExportEmployeeToExcel', requestParam, function (result) {\n\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n        return \"\";\n\n    };\n\n\n    var exportEmplyeesExpandedListToExcel = function (ViewModel, successCallBack) {\n\n\n        var filter = null;\n        if (ViewModel.dsEmployeeExpandedList.filter() !== undefined) {\n            filter = ViewModel.dsEmployeeExpandedList.filter();\n        }\n        var sort = null;\n        if (ViewModel.dsEmployeeExpandedList.sort() !== undefined) {\n            sort = ViewModel.dsEmployeeExpandedList.sort();\n        }\n\n        var pageIndex = 1;\n        if (ViewModel.dsEmployeeExpandedList.page() !== undefined) {\n            pageIndex = ViewModel.dsEmployeeExpandedList.page();\n        }\n\n        var pageSize = 10;\n        if (ViewModel.dsEmployeeExpandedList.pageSize() !== undefined) {\n            pageSize = ViewModel.dsEmployeeExpandedList.pageSize();\n        }\n\n\n        var requestParam = {};\n        requestParam.Criteria = { PageSize: pageSize, PageIndex: pageIndex, SearchToken: ViewModel.searchToken, Filter: filter, Sort: sort };\n        requestParam.ShelterId = ViewModel.empHeaderData.shelter.Id;\n     \n\n        //+Note Request Data Added\n        requestParam.SelectedEmployeeIds = ViewModel.get(\"empRequestData.SelectedEmployeeIds\");\n        requestParam.UnSelectedEmployeeIds = ViewModel.get(\"empRequestData.UnSelectedEmployeeIds\");\n        requestParam.ViewAll = ViewModel.empRequestData.ViewAll;\n        requestParam.FetchSelectedOnly = ViewModel.empRequestData.FetchSelectedOnly;\n\n\n\n        $ct.ajax.ajaxPost($ct.cn.getEmployeeUrl() + 'ExportExpandedEmployeeToExcel', requestParam, function (result) {\n\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n        return \"\";\n\n\n    };\n\n\n    var getActiveEvents = function (ViewModel, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.ShelterId = ViewModel.empHeaderData.shelter.Id;\n        \n        $ct.ajax.ajaxPost($ct.cn.getEventUrl() + 'GetActiveEvent', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    var downloadEmployeeToExcel = function (ViewModel, successCallBack) {\n\n        var requestParam = {};\n\n        requestParam.ShelterId = ViewModel.selectedShelterItem.Id;\n\n\n        $ct.ajax.ajaxPost($ct.cn.getEmployeeUrl() + 'DownloadEmployeeToExcel', requestParam, function (result) {\n\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n        return \"\";\n\n\n    };\n\n    var getEmployeeColumnLookup = function (successCallBack) {\n      \n        var requestParam = \"\";\n\n        $ct.ajax.ajaxPost($ct.cn.getEmployeeUrl() + 'GetEmployeeFilterLookupData', requestParam, function (result) {\n           \n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n        return \"\";\n    };\n\n\n\n    return {\n\n            getImportActionOptions: getImportActionOptions,\n            getExportFailedImportedEmployeeDataToExcel: getExportFailedImportedEmployeeDataToExcel,\n            getEmployeeBulkUpdateLookup  : getEmployeeBulkUpdateLookup ,\n            bulkUpdateEmployeeData: bulkUpdateEmployeeData,\n            getEmployees: getEmployees,\n            getEmployeeExpandedList:getEmployeeExpandedList,\n            deleteEmployeeById: deleteEmployeeById,\n            getEmployeeById: getEmployeeById,\n            saveEmployee: saveEmployee,\n            exportEmployeesListToExcel: exportEmployeesListToExcel,\n            exportEmplyeesExpandedListToExcel:exportEmplyeesExpandedListToExcel,\n            downloadEmployeeToExcel: downloadEmployeeToExcel,\n            getActiveEvents: getActiveEvents,\n            getEmployeeColumnLookup: getEmployeeColumnLookup\n\n    };\n\n}();","$ct.ds.emp.empattendance = function () {\n\n\n    var getEmployeeAttendenceEvent = function (successCallBack) {\n        var Data = {};\n        Data.ShelterId = 1;\n        $ct.ajax.ajaxPost($ct.cn.getEventUrl() + 'GetActiveEvent', Data, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n\n\n    };\n    var getEmployeeAttendenceInitialLoad = function (successCallBack) {\n\n        $ct.ajax.ajaxPost($ct.cn.getEmployeeAttendanceUrl() + 'GetEmployeeShiftTime', \"\", function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n\n\n    };\n    var getEmployeeAttendenceFacilities = function (successCallBack) {\n\n        $ct.ajax.ajaxPost($ct.cn.getShelterUrl() + 'GetSheltersWithSecurity', \"\", function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n\n\n    };\n\n    var getEmployeeAttendence = function (ViewModel, successCallBack) {\n\n        var datasource = new kendo.data.DataSource({\n            transport: {\n\n                read: function (options) {\n\n                    var filter = null;\n                    if (options.data.filter !== undefined) {\n                        filter = options.data.filter;\n                    }\n\n                    var sort = null;\n                    if (options.data.sort !== undefined) {\n                        sort = options.data.sort;\n                    }\n\n                    var requestParam = {};\n                    requestParam.Criteria = { PageSize: options.data.pageSize, PageIndex: options.data.page, SearchToken: \"\", Filter: filter, Sort: sort };\n\n\n                    //previousAttendenceDatestring\n                    \n                    \n                    \n                    \n                    requestParam.FacilityId = ViewModel.previousSelectedFacility;\n                   \n                   \n                    requestParam.PrevShiftDate = ViewModel.previousAttendenceDatestring;\n                    requestParam.CurrShiftDate = ViewModel.attendenceDatestring;\n                    requestParam.ShiftId = ViewModel.previousSelectedShift;\n                    requestParam.SelectedEmployeeIds = ViewModel.dcRequestData.selectedEmployeeIds;\n                    requestParam.UnSelectedEmployeeIds = ViewModel.dcRequestData.unSelectedEmployeeIds;\n                    requestParam.ViewAll = ViewModel.dcRequestData.viewAll;\n                    requestParam.FetchSelectedOnly = ViewModel.dcRequestData.fetchSelectedOnly;\n\n\n                    $ct.ajax.ajaxPost($ct.cn.getEmployeeAttendanceUrl() + 'GetEmployeeAttendance', requestParam, function (result) {\n\n                        ViewModel.set(\"dcRequestData.viewAll\", false);\n                        ViewModel.set(\"dcRequestData.fetchSelectedOnly\", false);\n\n                        options.success(result);\n\n                        if (successCallBack != null)\n                            successCallBack(result);\n                    }, null, true)\n                }\n            },\n            serverSorting: true,\n            serverPaging: true,\n            serverFiltering: true,\n            pageSize: 10,\n            schema: {\n                data: function (response) {\n\n                    $.each(response.Data.EmployeeAttendanceRawData, function (index, record) {\n\n                        record.hideValidation = true;\n                        record.saveClicked = false;\n                        record.StatusLookUpData = response.Data.StatusLookUpData;\n\n\n                    });\n\n                    return response.Data.EmployeeAttendanceRawData;\n                },\n                total: function (response) {\n\n                    if (response != null && response != undefined && response != \"\")\n                        return response.TotalRecords;\n                },\n                model: { // define the model of the data source. Required for validation and property types.\n                    fields: {\n                       \n                    }\n                }\n            }\n        });\n\n        \n        return datasource;\n\n\n    };\n\n    var saveEmployeeAttendence = function (saveEmployeeAttendenceData, successCallBack) {\n\n        $ct.ajax.ajaxPost($ct.cn.getEmployeeAttendanceUrl() + 'SaveEmployeeAttendance', saveEmployeeAttendenceData, function (result) {\n\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    var bulkUpdateEmployeeAttendence = function (bulkUpdateEmployeeAttendenceData, successCallBack) {\n\n        $ct.ajax.ajaxPost($ct.cn.getEmployeeAttendanceUrl() + 'BulkUpdateSelectedEmployeeAttendance', bulkUpdateEmployeeAttendenceData, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n\n        return \"\";\n    };\n\n    var exportEmployeeAttendenceToExcel = function (ViewModel, successCallBack) {\n\n\n        var filter = null;\n        if (ViewModel.dsEmployeeAttendance.filter() !== undefined) {\n            filter = ViewModel.dsEmployeeAttendance.filter();\n        }\n\n        var sort = null;\n        if (ViewModel.dsEmployeeAttendance.sort() !== undefined) {\n            sort = ViewModel.dsEmployeeAttendance.sort();\n        }\n\n        var pageIndex = 1;\n        if (ViewModel.dsEmployeeAttendance.page() !== undefined) {\n            pageIndex = ViewModel.dsEmployeeAttendance.page();\n        }\n\n        var pageSize = 10;\n        if (ViewModel.dsEmployeeAttendance.pageSize() !== undefined) {\n            pageSize = ViewModel.dsEmployeeAttendance.pageSize();\n        }\n\n        var requestParam = {};\n\n        requestParam.Criteria = { PageSize: pageSize, PageIndex: pageIndex, Filter: filter, Sort: sort };\n       \n       \n      \n        requestParam.FacilityId = ViewModel.previousSelectedFacility;\n        requestParam.PrevShiftDate = ViewModel.previousAttendenceDatestring;\n        requestParam.CurrShiftDate = ViewModel.attendenceDatestring;\n        requestParam.ShiftId = ViewModel.previousSelectedShift;\n        requestParam.SelectedEmployeeIds = ViewModel.get(\"dcRequestData.selectedEmployeeIds\");\n        requestParam.UnSelectedEmployeeIds = ViewModel.get(\"dcRequestData.unSelectedEmployeeIds\");\n        requestParam.ViewAll = ViewModel.dcRequestData.viewAll;\n        requestParam.FetchSelectedOnly = ViewModel.dcRequestData.fetchSelectedOnly;\n\n        $ct.ajax.ajaxPost($ct.cn.getEmployeeAttendanceUrl() + 'ExportEmployeeAttendanceToExcel', requestParam, function (result) {\n\n            if (successCallBack != null)\n                successCallBack(result);\n\n        }, null, true)\n\n        return \"\";\n    };\n    return {\n        getEmployeeAttendenceEvent: getEmployeeAttendenceEvent,\n        getEmployeeAttendenceInitialLoad: getEmployeeAttendenceInitialLoad,\n        getEmployeeAttendenceFacilities: getEmployeeAttendenceFacilities,\n        getEmployeeAttendence: getEmployeeAttendence,\n        saveEmployeeAttendence: saveEmployeeAttendence,\n        bulkUpdateEmployeeAttendence: bulkUpdateEmployeeAttendence,\n        exportEmployeeAttendenceToExcel: exportEmployeeAttendenceToExcel\n\n    };\n\n\n\n}();","$ct.ds.sheltree.sheltree = function () {\n\n    var testFunction = function () {\n\n\n    };\n\n    return {\n\n        testFunction: testFunction\n    };\n\n}();","$(document).ready(function (e) {\n    var $appHeader  = $('#hd');\n    var $appContent = $('#bd');\n\n    // alerts\n    $appContent.on('click', '.app-alerts', alertsToggle);\n\n    // navigation view toggle\n    $appHeader.on({\n        'mouseenter': showNavPanel,\n        'mouseleave': hideNavPanel\n    });\n\n    // hide nav when close button clicked\n    $appHeader.on('click', '.app-logo__menu-collapse', hideNavPanel);\n});\n\n/**\n * root HTML element\n * @type {object}\n */\nvar rootEle = document.documentElement;\n\n/**\n * Toggle alerts view on the page\n * @param  {object} e event\n */\nfunction alertsToggle(e){\n    var alertsEle = e.currentTarget;\n    $(alertsEle).toggleClass('is-alerts-visible');\n}\n\n/**\n * show navigation panel\n */\nfunction showNavPanel() {\n    $(rootEle).addClass('has-nav-expanded');\n}\n\n/**\n * hide navigation panel\n */\nfunction hideNavPanel() {\n    $(rootEle).removeClass('has-nav-expanded');\n}\n"],"sourceRoot":"/source/"}